#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç batch API
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.core.app import AppFactory

def test_batch_api():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç batch API"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.DEBUG)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ AppFactory
        app = AppFactory.create_app()
        
        print("üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç batch API...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        invoice_id = 2499  # –ó–Ω–∞–µ–º —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å 1 —Ç–æ–≤–∞—Ä
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º batch –¥–∞–Ω–Ω—ã–µ
        batch_data = {
            f'products_invoice_{invoice_id}': {
                'method': 'crm.item.productrow.list',
                'params': {
                    'filter': {
                        '=ownerType': 'SI',
                        '=ownerId': invoice_id
                    }
                }
            }
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∑–∞–ø—Ä–æ—Å:")
        print(f"   –î–∞–Ω–Ω—ã–µ: {batch_data}")
        
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ _make_request
        response = app.bitrix_client._make_request('POST', 'batch', data=batch_data)
        
        print(f"üì• –û—Ç–≤–µ—Ç batch API:")
        print(f"   Success: {response.success}")
        print(f"   Status: {response.status_code}")  
        print(f"   Data type: {type(response.data)}")
        print(f"   Data: {response.data}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        print(f"\nüîç –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
        single_response = app.bitrix_client._make_request(
            'POST', 
            'crm.item.productrow.list', 
            data={
                'filter': {
                    '=ownerType': 'SI',
                    '=ownerId': invoice_id
                }
            }
        )
        
        print(f"   Success: {single_response.success}")
        print(f"   Status: {single_response.status_code}")
        print(f"   Data type: {type(single_response.data)}")
        print(f"   Data: {single_response.data}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_batch_api() 