"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bitrix24 REST API.
–í–∫–ª—é—á–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ rate limiting, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.
"""

import requests
import logging
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

from .rate_limiter import AdaptiveRateLimiter
from .exceptions import (
    Bitrix24APIError,
    RateLimitError,
    ServerError,
    AuthenticationError,
    NetworkError,
    BadRequestError,
    NotFoundError,
    TimeoutError as APITimeoutError,
)
from .api_cache import get_cache
from .retry_decorator import retry_on_api_error  # üî• –ù–û–í–û–ï (v2.1.2)

logger = logging.getLogger(__name__)


@dataclass
class APIResponse:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bitrix24 API"""

    data: Any
    headers: Dict[str, str]
    status_code: int
    success: bool
    error: Optional[str] = None
    total: Optional[int] = None
    next: Optional[int] = None


class Bitrix24Client:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Bitrix24 REST API.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ rate limiting (‚â§2 req/sec)
    - Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    - –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    """

    def __init__(
        self,
        webhook_url: str,
        timeout: int = 30,
        max_retries: int = 3,
        rate_limit: float = 2.0,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞.

        Args:
            webhook_url: URL webhook –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
            rate_limit: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        """
        self.webhook_url = webhook_url.rstrip("/")
        self.timeout = timeout
        self.max_retries = max_retries

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.rate_limiter = AdaptiveRateLimiter(max_requests_per_second=rate_limit)
        self.session = requests.Session()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        self.session.headers.update(
            {
                "User-Agent": "Bitrix24-Report-Generator/1.0",
                "Accept": "application/json",
            }
        )

        # –ú–∞—Å–∫–∏—Ä—É–µ–º webhook URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        masked_url = self._mask_webhook_url(webhook_url)
        logger.info(f"Bitrix24 client initialized for {masked_url}")

    def _mask_webhook_url(self, webhook_url: str) -> str:
        """
        –ú–∞—Å–∫–∏—Ä—É–µ—Ç webhook URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            webhook_url: –ü–æ–ª–Ω—ã–π webhook URL

        Returns:
            str: –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –≤–∏–¥–∞ https://portal.bitrix24.ru/rest/12/***/
        """
        import re

        if not webhook_url or "https://" not in webhook_url:
            return webhook_url

        # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ URL: https://portal.bitrix24.ru/rest/12345/abc123def456/ -> https://portal.bitrix24.ru/rest/12345/***/
        # –£–¥–∞–ª—è–µ–º trailing slash –ø–µ—Ä–µ–¥ –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —Å–ª—ç—à–∞
        masked = re.sub(r"(/rest/\d+/)[a-zA-Z0-9_]+/?$", r"\1***/", webhook_url)
        return masked

    def _make_request(
        self,
        method: str,
        endpoint: str,
        data: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> APIResponse:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π.

        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST)
            endpoint: API endpoint (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'crm.invoice.list')
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
            params: URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        Returns:
            APIResponse: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

        Raises:
            Bitrix24APIError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
        """
        url = f"{self.webhook_url}/{endpoint}"
        retry_count = 0

        while retry_count <= self.max_retries:
            try:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
                self.rate_limiter.acquire()

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                logger.debug(f"Making {method} request to {endpoint}")

                if method.upper() == "GET":
                    response = self.session.get(
                        url, params=params, timeout=self.timeout
                    )
                elif method.upper() == "POST":
                    response = self.session.post(
                        url, json=data, params=params, timeout=self.timeout
                    )
                else:
                    raise BadRequestError(f"Unsupported HTTP method: {method}")

                # –û–±–Ω–æ–≤–ª—è–µ–º rate limiter –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
                self.rate_limiter.update_from_response(
                    dict(response.headers), response.status_code
                )

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                return self._handle_response(response)

            except requests.exceptions.RequestException as e:
                retry_count += 1
                error = self._handle_request_exception(e, retry_count)

                if not error.is_retryable() or retry_count > self.max_retries:
                    raise error

                logger.warning(
                    f"Request failed, retry {retry_count}/{self.max_retries}: {error}"
                )

        raise NetworkError("Max retries exceeded")

    def _handle_response(self, response: requests.Response) -> APIResponse:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bitrix24.

        Args:
            response: HTTP –æ—Ç–≤–µ—Ç

        Returns:
            APIResponse: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

        Raises:
            Bitrix24APIError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
        """
        headers = dict(response.headers)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
        if response.status_code == 429:
            raise RateLimitError("Rate limit exceeded")
        elif response.status_code in (401, 403):
            raise AuthenticationError("Authentication failed")
        elif response.status_code == 404:
            raise NotFoundError("API endpoint not found")
        elif response.status_code >= 500:
            raise ServerError(f"Server error: {response.status_code}")
        elif response.status_code >= 400:
            raise BadRequestError(f"Bad request: {response.status_code}")

        try:
            json_data = response.json()
        except ValueError:
            raise Bitrix24APIError("Invalid JSON response")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bitrix24 specific –æ—à–∏–±–∫–∏
        if "error" in json_data:
            error_msg = json_data.get(
                "error_description", json_data.get("error", "Unknown error")
            )
            raise Bitrix24APIError(f"Bitrix24 API error: {error_msg}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        result_data = json_data.get("result", json_data)
        total = json_data.get("total")
        next_item = json_data.get("next")

        return APIResponse(
            data=result_data,
            headers=headers,
            status_code=response.status_code,
            success=True,
            total=total,
            next=next_item,
        )

    def _handle_request_exception(
        self, exception: requests.exceptions.RequestException, retry_count: int
    ) -> Bitrix24APIError:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π requests.

        Args:
            exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ requests
            retry_count: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏

        Returns:
            Bitrix24APIError: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        """
        if isinstance(exception, requests.exceptions.Timeout):
            return APITimeoutError(f"Request timeout (attempt {retry_count})")
        elif isinstance(exception, requests.exceptions.ConnectionError):
            return NetworkError(
                f"Connection error (attempt {retry_count}): {exception}"
            )
        else:
            return NetworkError(f"Request error (attempt {retry_count}): {exception}")

    def get_invoices(
        self,
        start: int = 0,
        limit: int = 50,
        filters: Optional[Dict[str, Any]] = None,
    ) -> APIResponse:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤.

        Args:
            start: –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–∞–∫—Å. 50)
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            APIResponse: –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
        """
        params = {
            "start": start,
            "limit": min(limit, 50),  # Bitrix24 –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        }

        if filters:
            params.update(filters)

        return self._make_request("GET", "crm.invoice.list", params=params)

    def get_requisites(
        self,
        entity_type: str,
        entity_id: int,
    ) -> APIResponse:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

        Args:
            entity_type: –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ (COMPANY, CONTACT)
            entity_id: ID —Å—É—â–Ω–æ—Å—Ç–∏

        Returns:
            APIResponse: –†–µ–∫–≤–∏–∑–∏—Ç—ã
        """
        params = {
            "filter": {
                "ENTITY_TYPE_ID": entity_type,
                "ENTITY_ID": entity_id,
            }
        }

        return self._make_request("GET", "crm.requisite.list", params=params)

    def get_all_invoices(
        self, filters: Optional[Dict[str, Any]] = None
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            List[Dict]: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
        """
        all_invoices = []
        start = 0
        limit = 50

        while True:
            response = self.get_invoices(start=start, limit=limit, filters=filters)

            if not response.data:
                break

            if isinstance(response.data, list):
                all_invoices.extend(response.data)
            else:
                all_invoices.append(response.data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
            if response.next is None or len(response.data) < limit:
                break

            start = response.next

            logger.debug(f"Loaded {len(all_invoices)} invoices so far")

        logger.info(f"Total invoices loaded: {len(all_invoices)}")
        return all_invoices

    def get_smart_invoices(
        self,
        entity_type_id: int = 31,
        filters: Optional[Dict[str, Any]] = None,
        select: Optional[List[str]] = None,
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö Smart Invoices —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        Args:
            entity_type_id: ID —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏ (31 –¥–ª—è Smart Invoices)
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            List[Dict]: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ Smart Invoices
        """
        all_invoices = []
        start = 0
        limit = 50

        while True:
            params = {"entityTypeId": entity_type_id, "start": start, "limit": limit}

            if filters:
                params["filter"] = filters

            if select:
                params["select"] = select

            response = self._make_request("POST", "crm.item.list", data=params)

            if not response.data or not response.data.get("items"):
                break

            items = response.data.get("items", [])
            all_invoices.extend(items)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
            if response.next is None or len(items) < limit:
                break

            start = response.next

            logger.debug(f"Loaded {len(all_invoices)} smart invoices so far")

        logger.info(f"Total smart invoices loaded: {len(all_invoices)}")
        return all_invoices

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.session:
            self.session.close()
            logger.info("Bitrix24 client closed")

    def get_requisite_links(
        self, entity_type_id: int, entity_id: int
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–∫–∞–∫ –≤ ShortReport.py)

        Args:
            entity_type_id: –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ (31 –¥–ª—è Smart Invoices)
            entity_id: ID —Å—É—â–Ω–æ—Å—Ç–∏

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        """
        method = "crm.requisite.link.list"
        params = {
            "filter[ENTITY_TYPE_ID]": entity_type_id,
            "filter[ENTITY_ID]": entity_id,
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache = get_cache()
        cached_result = cache.get(method, params)
        if cached_result is not None:
            logger.debug(f"Cache hit for requisite links of entity {entity_id}")
            return cached_result

        response = self._make_request("GET", method, params=params)
        result = response.data if response.data else []

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache.put(method, params, result)

        return result

    def get_requisite_details(self, requisite_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–∫–∞–∫ –≤ ShortReport.py)

        Args:
            requisite_id: ID —Ä–µ–∫–≤–∏–∑–∏—Ç–∞

        Returns:
            Dict: –î–µ—Ç–∞–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –∏–ª–∏ None
        """
        method = "crm.requisite.get"
        data = {"id": str(requisite_id)}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache = get_cache()
        cached_result = cache.get(method, data)
        if cached_result is not None:
            logger.debug(f"Cache hit for requisite details {requisite_id}")
            return cached_result

        response = self._make_request("POST", method, data=data)
        result = response.data if response.data else None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache.put(method, data, result)

        return result

    def get_company_info_by_invoice(self, invoice_number: str) -> tuple:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Å—á–µ—Ç–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ ShortReport.py)

        Args:
            invoice_number: –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞

        Returns:
            tuple: (–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏, –ò–ù–ù)
        """
        try:
            # 1. –ò—â–µ–º —Å—á—ë—Ç –ø–æ –Ω–æ–º–µ—Ä—É (accountNumber)
            params = {"filter[accountNumber]": invoice_number, "entityTypeId": 31}

            response = self._make_request("GET", "crm.item.list", params=params)

            if not response.data or not response.data.get("items"):
                return None, None

            items = response.data.get("items", [])
            inv_id = items[0].get("id")
            if not inv_id:
                return None, None

            # 2. –ò—â–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤ crm.requisite.link
            requisite_links = self.get_requisite_links(31, inv_id)
            if not requisite_links:
                return "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤", "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"

            req_id = requisite_links[0].get("REQUISITE_ID")
            if not req_id or int(req_id) <= 0:
                return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç"

            # 3. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç
            requisite_details = self.get_requisite_details(int(req_id))
            if not requisite_details:
                return "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞", "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞"

            rq_inn = requisite_details.get("RQ_INN", "")
            rq_company = requisite_details.get("RQ_COMPANY_NAME", "")
            rq_name = requisite_details.get("RQ_NAME", "")

            # 4. –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ –ò–ù–ù (–∫–∞–∫ –≤ ShortReport.py)
            if rq_inn.isdigit():
                if len(rq_inn) == 10:
                    return rq_company, rq_inn  # –û–û–û/–ó–ê–û
                elif len(rq_inn) == 12:
                    return (
                        f"–ò–ü {rq_name}" if rq_name else "–ò–ü (–Ω–µ—Ç –∏–º–µ–Ω–∏)",
                        rq_inn,
                    )  # –ò–ü
                else:
                    return rq_company, rq_inn
            else:
                return rq_company, rq_inn

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è {invoice_number}: {e}")
            return "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞"""
        return {
            "rate_limiter": self.rate_limiter.get_stats(),
            "session_adapters": len(self.session.adapters),
            "webhook_url": self._mask_webhook_url(self.webhook_url),
            "timeout": self.timeout,
            "max_retries": self.max_retries,
        }

    def __enter__(self):
        """Context manager entry"""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        self.close()

    @retry_on_api_error(
        max_retries=3, backoff_factor=1.0, retryable_codes=(429, 500, 502, 503, 504)
    )
    def call(self, method: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–∑–æ–≤–∞ Bitrix24 API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry

        üî• –ù–û–í–û–ï (v2.1.2): –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API wrapper —Å retry –ª–æ–≥–∏–∫–æ–π –¥–ª—è
        –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ Bitrix24 (–Ω–∞–ø—Ä–∏–º–µ—Ä, crm.company.get)

        Args:
            method: –ò–º—è –º–µ—Ç–æ–¥–∞ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'crm.company.get')
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º API

        Raises:
            HTTPError: –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞—Ö –ø–æ—Å–ª–µ –≤—Å–µ—Ö retry
            RequestException: –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Ç—å—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö retry
        """
        if params is None:
            params = {}

        response = self._make_request("POST", method, data=params)

        if not response.success:
            raise Bitrix24APIError(
                f"API call failed: {response.error}", status_code=response.status_code
            )

        return response.data

    def get_products_by_invoice(self, invoice_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ID —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ crm.item.productrow.list —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        –ù–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ–≥–æ Proof of Concept —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
        - =ownerType: SI (Smart Invoice)
        - =ownerId: ID —Å—á–µ—Ç–∞

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç APIDataCache –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤.

        Args:
            invoice_id: ID Smart Invoice —Å—á–µ—Ç–∞

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å—á–µ—Ç–∞
        """
        try:
            method = "crm.item.productrow.list"
            params = {
                "filter": {
                    "=ownerType": "SI",  # Smart Invoice (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ PoC)
                    "=ownerId": invoice_id,
                }
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache = get_cache()
            cached_result = cache.get(method, params)
            if cached_result is not None:
                logger.debug(f"Cache hit for products of invoice {invoice_id}")
                return cached_result

            logger.debug(f"Getting products for invoice {invoice_id} (cache miss)")
            response = self._make_request("POST", method, data=params)

            if response and response.success:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ PoC: result.productRows
                products = (
                    response.data.get("productRows", [])
                    if isinstance(response.data, dict)
                    else []
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                cache.put(method, params, products)

                logger.info(
                    f"Retrieved {len(products)} products for invoice {invoice_id}"
                )
                return products
            else:
                logger.warning(
                    f"No products found for invoice {invoice_id}: {response.error if response else 'Unknown error'}"
                )
                return []

        except Exception as e:
            logger.error(f"Error getting products for invoice {invoice_id}: {e}")
            return []

    def get_products_by_invoices_batch(
        self, invoice_ids: List[int], chunk_size: int = 50
    ) -> Dict[int, List[Dict[str, Any]]]:
        """
        Batch –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ crm.item.productrow.list

        –†–µ–∞–ª–∏–∑—É–µ—Ç Hybrid Caching Architecture –∏–∑ creative phase:
        - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ chunk_size
        - Batch API optimization –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        - –í–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—á–µ—Ç–∞–º

        Args:
            invoice_ids: –°–ø–∏—Å–æ–∫ ID Smart Invoice —Å—á–µ—Ç–æ–≤
            chunk_size: –†–∞–∑–º–µ—Ä batch (–º–∞–∫—Å. 50 –¥–ª—è Bitrix24)

        Returns:
            Dict[invoice_id, products_list]: –¢–æ–≤–∞—Ä—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç–∞–º
        """
        if not invoice_ids:
            return {}

        all_products = {}

        # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ crm.item.productrow.list –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø –≤ batch API
        # –°–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ batch –∑–∞–ø—Ä–æ—Å–∞—Ö
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

        logger.info(
            f"Using individual requests for {len(invoice_ids)} invoices (batch API not supported for productrow.list)"
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
        for invoice_id in invoice_ids:
            try:
                products = self.get_products_by_invoice(invoice_id)
                all_products[invoice_id] = products
                if products:
                    logger.debug(f"Invoice {invoice_id}: {len(products)} products")
            except Exception as e:
                logger.error(f"Error getting products for invoice {invoice_id}: {e}")
                all_products[invoice_id] = []

        total_products = sum(len(products) for products in all_products.values())
        logger.info(
            f"Individual processing complete: {len(all_products)} invoices, {total_products} total products"
        )

        return all_products

    def get_detailed_invoice_data(self, invoice_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å—á–µ—Ç—É –≤–∫–ª—é—á–∞—è —Ç–æ–≤–∞—Ä—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã

        –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞, —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã.

        Args:
            invoice_id: ID Smart Invoice —Å—á–µ—Ç–∞

        Returns:
            Dict: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
            params = {
                "entityTypeId": 31,  # Smart Invoices
                "filter": {"id": invoice_id},
                "select": ["id", "title", "opportunity", "accountNumber", "stageId"],
            }

            invoice_response = self._make_request("POST", "crm.item.list", data=params)

            if not (
                invoice_response
                and invoice_response.success
                and invoice_response.data
                and invoice_response.data.get("items")
            ):
                logger.warning(f"Invoice {invoice_id} not found or inaccessible")
                return None

            invoice_info = invoice_response.data["items"][0]

            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—á–µ—Ç—É
            products = self.get_products_by_invoice(invoice_id)

            # 3. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å accountNumber)
            account_number = invoice_info.get("accountNumber")
            company_name = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            inn = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

            if account_number:
                company_name, inn = self.get_company_info_by_invoice(account_number)

            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            detailed_data = {
                "invoice": invoice_info,
                "products": products,
                "company_name": company_name,
                "inn": inn,
                "total_products": len(products),
                "account_number": account_number,
            }

            logger.info(
                f"Retrieved detailed data for invoice {invoice_id}: {len(products)} products"
            )
            return detailed_data

        except Exception as e:
            logger.error(f"Error getting detailed invoice data for {invoice_id}: {e}")
            return None
