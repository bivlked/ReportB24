#!/usr/bin/env python3
"""
–¢–µ—Å—Ç batch API –≤ —Ñ–æ—Ä–º–∞—Ç–µ CRest –∫–∞–∫ –≤ Context7 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.core.app import AppFactory

def test_crest_batch_api():
    """–¢–µ—Å—Ç batch API –≤ —Ñ–æ—Ä–º–∞—Ç–µ CRest"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.DEBUG)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ AppFactory
        app = AppFactory.create_app()
        
        print("üîç –¢–µ—Å—Ç batch API –≤ —Ñ–æ—Ä–º–∞—Ç–µ CRest...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        invoice_id = 2499  # –ó–Ω–∞–µ–º —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å 1 —Ç–æ–≤–∞—Ä
        
        # –§–û–†–ú–ê–¢ 1: –ö–∞–∫ –≤ Context7 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ CRest::callBatch
        batch_data_crest = {
            'cmd': {
                f'products_invoice_{invoice_id}': f'crm.item.productrow.list?filter[=ownerType]=SI&filter[=ownerId]={invoice_id}'
            }
        }
        
        print(f"üì§ –¢–µ—Å—Ç 1 - CRest —Ñ–æ—Ä–º–∞—Ç:")
        print(f"   –î–∞–Ω–Ω—ã–µ: {batch_data_crest}")
        
        response1 = app.bitrix_client._make_request('POST', 'batch', data=batch_data_crest)
        
        print(f"üì• –û—Ç–≤–µ—Ç CRest —Ñ–æ—Ä–º–∞—Ç:")
        print(f"   Success: {response1.success}")
        print(f"   Data: {response1.data}")
        
        # –§–û–†–ú–ê–¢ 2: JSON –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ params
        batch_data_params = {
            'cmd': {
                f'products_invoice_{invoice_id}': {
                    'method': 'crm.item.productrow.list',
                    'params': {
                        'filter': {
                            '=ownerType': 'SI',
                            '=ownerId': invoice_id
                        }
                    }
                }
            }
        }
        
        print(f"\nüì§ –¢–µ—Å—Ç 2 - JSON params —Ñ–æ—Ä–º–∞—Ç:")
        print(f"   –î–∞–Ω–Ω—ã–µ: {batch_data_params}")
        
        response2 = app.bitrix_client._make_request('POST', 'batch', data=batch_data_params)
        
        print(f"üì• –û—Ç–≤–µ—Ç JSON params —Ñ–æ—Ä–º–∞—Ç:")
        print(f"   Success: {response2.success}")
        print(f"   Data: {response2.data}")
        
        # –§–û–†–ú–ê–¢ 3: –ü—Ä–æ—Å—Ç–æ–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        batch_data_simple = {
            'cmd': {
                'test_method': 'crm.enum.ownertype'
            }
        }
        
        print(f"\nüì§ –¢–µ—Å—Ç 3 - –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥:")
        print(f"   –î–∞–Ω–Ω—ã–µ: {batch_data_simple}")
        
        response3 = app.bitrix_client._make_request('POST', 'batch', data=batch_data_simple)
        
        print(f"üì• –û—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥:")
        print(f"   Success: {response3.success}")
        print(f"   Data: {response3.data}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_crest_batch_api() 