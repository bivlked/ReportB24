"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ retry API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å exponential backoff

üî• –ù–û–í–û–ï (v2.1.2): –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–±–æ—è–º API
- Exponential backoff: 1s, 2s, 4s, 8s...
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ HTTP –∫–æ–¥—ã –¥–ª—è retry (429, 500, 502, 503, 504)
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫
- Thread-safe
"""

import time
import functools
from typing import Callable, Any, Tuple, Type
from requests.exceptions import RequestException, HTTPError
import logging

logger = logging.getLogger(__name__)


class RetryExhaustedError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤—Å–µ retry –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã"""

    pass


def retry_on_api_error(
    max_retries: int = 3,
    backoff_factor: float = 1.0,
    retryable_codes: Tuple[int, ...] = (429, 500, 502, 503, 504),
    exceptions: Tuple[Type[Exception], ...] = (RequestException, ConnectionError),
    log_attempts: bool = True,
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry —Å exponential backoff

    Args:
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
        backoff_factor: –ë–∞–∑–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)
        retryable_codes: Tuple HTTP –∫–æ–¥–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è retry
        exceptions: Tuple —Ç–∏–ø–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è retry
        log_attempts: –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)

    Returns:
        –î–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π

    Example:
        @retry_on_api_error(max_retries=5, backoff_factor=2.0)
        def api_call():
            return requests.get('https://api.example.com')
    """

    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            last_exception = None

            for attempt in range(1, max_retries + 1):
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
                    result = func(*args, **kwargs)

                    # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    if log_attempts and attempt > 1:
                        logger.info(
                            f"‚úÖ {func.__name__} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω "
                            f"–ø–æ—Å–ª–µ {attempt} –ø–æ–ø—ã—Ç–æ–∫"
                        )

                    return result

                except HTTPError as e:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∫–æ–¥
                    if hasattr(e, "response") and e.response is not None:
                        status_code = e.response.status_code

                        if status_code not in retryable_codes:
                            # –ù–µ retry –¥–ª—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–¥–æ–≤
                            if log_attempts:
                                logger.error(
                                    f"‚ùå HTTP {status_code} –¥–ª—è {func.__name__}, "
                                    f"retry –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è"
                                )
                            raise

                    last_exception = e

                except exceptions as e:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                    last_exception = e

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if attempt < max_retries:
                    # Exponential backoff: 1s, 2s, 4s, 8s...
                    delay = backoff_factor * (2 ** (attempt - 1))

                    if log_attempts:
                        logger.warning(
                            f"‚ö†Ô∏è {func.__name__} –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: "
                            f"{type(last_exception).__name__}: {last_exception}. "
                            f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å..."
                        )

                    time.sleep(delay)
                else:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞
                    if log_attempts:
                        logger.error(
                            f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {func.__name__}"
                        )

            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –±—Ä–æ—Å–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            if last_exception is not None:
                raise last_exception

            # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            raise RetryExhaustedError(
                f"Retry –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {func.__name__} –±–µ–∑ –∑–∞–ø–∏—Å–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
            )

        return wrapper

    return decorator
