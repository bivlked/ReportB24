#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–æ–ª—å–∫–æ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests
import configparser
import time
from datetime import datetime
from pathlib import Path
import openpyxl
from openpyxl import Workbook
from openpyxl.styles import PatternFill


def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24 API...")
    
    config = configparser.ConfigParser()
    config.read('config.ini', encoding='utf-8')
    webhook_url = config.get('BitrixAPI', 'webhookurl')
    
    print(f"üîó URL: {webhook_url}")
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ Smart Invoices
    print("üìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ Smart Invoices...")
    params = {
        'entityTypeId': 31,
        'start': 0,
        'filter': {'!stageId': 'DT31_1:D'},
        'select': ['id', 'accountNumber', 'opportunity', 'taxValue']
    }
    
    try:
        resp = requests.post(f"{webhook_url}crm.item.list", json=params)
        if resp.status_code == 200:
            data = resp.json()
            items = data.get('result', {}).get('items', [])
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(items)}")
            
            if items:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                test_invoices = items[:3]
                print("\nüìä –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:")
                for i, inv in enumerate(test_invoices, 1):
                    print(f"  {i}. ID: {inv.get('id')}, –ù–æ–º–µ—Ä: {inv.get('accountNumber')}")
                
                return test_invoices, webhook_url
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return [], webhook_url
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {resp.status_code}")
            return [], webhook_url
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return [], webhook_url


def test_requisites(invoice, webhook_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞"""
    acc_num = invoice.get('accountNumber', '')
    print(f"\nüîç –¢–µ—Å—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —Å—á–µ—Ç–∞: {acc_num}")
    
    try:
        # 1. –ü–æ–∏—Å–∫ —Å—á–µ—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        print("  üìã –ü–æ–∏—Å–∫ —Å—á–µ—Ç–∞...")
        resp = requests.get(f"{webhook_url}crm.item.list", params={
            'filter[accountNumber]': acc_num,
            'entityTypeId': 31
        })
        time.sleep(0.5)
        data = resp.json()
        
        items = data.get('result', {}).get('items', [])
        if not items:
            print("    ‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return "–ù–µ –Ω–∞–π–¥–µ–Ω", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        inv_id = items[0].get('id')
        print(f"    ‚úÖ ID: {inv_id}")
        
        # 2. –ü–æ–∏—Å–∫ —Å–≤—è–∑–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        print("  üîó –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤...")
        link_resp = requests.get(f"{webhook_url}crm.requisite.link.list", params={
            'filter[ENTITY_TYPE_ID]': 31,
            'filter[ENTITY_ID]': inv_id
        })
        time.sleep(0.5)
        link_data = link_resp.json()
        link_items = link_data.get('result', [])
        
        if not link_items:
            print("    ‚ùå –ù–µ—Ç —Å–≤—è–∑–µ–π —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤")
            return "–ù–µ—Ç —Å–≤—è–∑–µ–π", "–ù–µ—Ç —Å–≤—è–∑–µ–π"
        
        req_id = link_items[0].get('REQUISITE_ID')
        print(f"    ‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç ID: {req_id}")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
        print("  üìù –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞...")
        req_resp = requests.post(f"{webhook_url}crm.requisite.get", json={"id": str(req_id)})
        time.sleep(0.5)
        req_data = req_resp.json()
        
        if not req_data.get('result'):
            print("    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞")
            return "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞", "–û—à–∏–±–∫–∞"
        
        fields = req_data['result']
        rq_inn = fields.get('RQ_INN', '')
        rq_company = fields.get('RQ_COMPANY_NAME', '')
        rq_name = fields.get('RQ_NAME', '')
        
        print(f"    üìä –ò–ù–ù: {rq_inn}")
        print(f"    üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {rq_company}")
        print(f"    üë§ –ò–º—è: {rq_name}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
        if rq_inn.isdigit():
            if len(rq_inn) == 10:
                result = (rq_company, rq_inn)
                print(f"    üè¢ –¢–∏–ø: –û–û–û/–ó–ê–û")
            elif len(rq_inn) == 12:
                result = (f"–ò–ü {rq_name}" if rq_name else "–ò–ü (–Ω–µ—Ç –∏–º–µ–Ω–∏)", rq_inn)
                print(f"    üë§ –¢–∏–ø: –ò–ü")
            else:
                result = (rq_company, rq_inn)
                print(f"    ‚ùì –¢–∏–ø: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ò–ù–ù")
        else:
            result = (rq_company, rq_inn)
            print(f"    ‚ö†Ô∏è –¢–∏–ø: –ò–ù–ù –Ω–µ —á–∏—Å–ª–æ")
        
        print(f"    ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result[0]}' | '{result[1]}'")
        return result
        
    except Exception as e:
        print(f"    üí• –û—à–∏–±–∫–∞: {e}")
        return "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"


def create_test_report(invoices, webhook_url):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ({len(invoices)} –∑–∞–ø–∏—Å–µ–π)")
    
    # –°–æ–∑–¥–∞–µ–º Excel
    wb = Workbook()
    ws = wb.active
    ws.title = "–¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ ShortReport.py
    headers = ["–ù–æ–º–µ—Ä", "–ò–ù–ù", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–°—É–º–º–∞", "–ù–î–°", "–î–∞—Ç–∞ —Å—á—ë—Ç–∞", "–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏", "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã"]
    ws.append(headers)
    
    # –¶–≤–µ—Ç–∞
    header_fill = PatternFill(start_color="C4D79B", end_color="C4D79B", fill_type="solid")
    red_fill = PatternFill(start_color="FFC0CB", end_color="FFC0CB", fill_type="solid")
    grey_fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")
    white_fill = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    for cell in ws["1:1"]:
        cell.fill = header_fill
    
    row_index = 2
    for i, inv in enumerate(invoices, 1):
        print(f"\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {i}/{len(invoices)}")
        
        acc_num = inv.get('accountNumber', '')
        opportunity = inv.get('opportunity', 0)
        tax_value = inv.get('taxValue', 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
        sum_val = f"{float(opportunity):,.2f}".replace(',', ' ').replace('.', ',')
        tax_text = f"{float(tax_value):,.2f}".replace(',', ' ').replace('.', ',') if float(tax_value) != 0 else "–Ω–µ—Ç"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        comp_name, inn = test_requisites(inv, webhook_url)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç—ã
        date_bill = "01.01.2022"
        ship_date = "02.01.2022"
        pay_date = "" if i == 1 else "03.01.2022"  # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –±–µ–∑ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã
        
        row_data = [acc_num, inn, comp_name, sum_val, tax_text, date_bill, ship_date, pay_date]
        ws.append(row_data)
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
        if pay_date == "":
            fill_color = red_fill
            color_desc = "üî¥ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π"
        elif tax_text == "–Ω–µ—Ç":
            fill_color = grey_fill
            color_desc = "üîò –ë–µ–∑ –ù–î–°"
        else:
            fill_color = white_fill
            color_desc = "‚ö™ –û–±—ã—á–Ω—ã–π"
        
        print(f"   üé® –¶–≤–µ—Ç: {color_desc}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ —Å—Ç—Ä–æ–∫–µ
        for col_idx in range(1, len(headers) + 1):
            cell = ws.cell(row=row_index, column=col_idx)
            cell.fill = fill_color
        
        row_index += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    Path('reports').mkdir(exist_ok=True)
    file_path = Path('reports') / 'Test_Correct_Report.xlsx'
    wb.save(file_path)
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {file_path}")
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê –û–¢–ß–ï–¢–û–í BITRIX24")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y.%m.%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        invoices, webhook_url = test_api_connection()
        
        if not invoices:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        success = create_test_report(invoices, webhook_url)
        
        if success:
            print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª: reports/Test_Correct_Report.xlsx")
        else:
            print("\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print(f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y.%m.%d %H:%M:%S')}")
    input("‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    main() 