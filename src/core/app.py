"""
–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ Bitrix24.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
"""

import logging
from logging.handlers import TimedRotatingFileHandler
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional
from dataclasses import dataclass

from ..config.config_reader import ConfigReader, create_secure_config_reader
from ..config.settings import APP_NAME, APP_VERSION, get_runtime_info
from ..config.validation import validate_system
from ..bitrix24_client.client import Bitrix24Client
from ..data_processor.data_processor import DataProcessor
from ..excel_generator.generator import ExcelReportGenerator
from .error_handler import get_error_handler, handle_error, generate_error_report
from .workflow import WorkflowOrchestrator


@dataclass
class AppStatus:
    """–°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    is_initialized: bool = False
    is_configured: bool = False
    is_validated: bool = False
    last_operation: Optional[str] = None
    last_operation_time: Optional[datetime] = None
    errors_count: int = 0

    def update_operation(self, operation: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        self.last_operation = operation
        self.last_operation_time = datetime.now()


class ReportGeneratorApp:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ Bitrix24.

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    """

    def __init__(
        self,
        config_path: str = "config.ini",
        enable_logging: bool = True,
        use_secure_config: bool = True,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            enable_logging: –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            use_secure_config: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SecureConfigReader (True) –∏–ª–∏ ConfigReader (False)
        """
        self.config_path = config_path
        self.enable_logging = enable_logging
        self.use_secure_config = use_secure_config
        self.status = AppStatus()

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã (ConfigReader –∏–ª–∏ SecureConfigReader)
        self.config_reader = None
        self.bitrix_client: Optional[Bitrix24Client] = None
        self.data_processor: Optional[DataProcessor] = None
        self.excel_generator: Optional[ExcelReportGenerator] = None
        self.workflow_orchestrator: Optional[WorkflowOrchestrator] = None

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.error_handler = get_error_handler()

        # –õ–æ–≥–≥–µ—Ä
        self.logger = self._setup_logging() if enable_logging else None

        self._log_info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω {APP_NAME} v{APP_VERSION}")

    def _setup_logging(self) -> logging.Logger:
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π (v2.4.0).

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TimedRotatingFileHandler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
        –ª–æ–≥–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å. –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º –¥–∞—Ç—ã.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π.

        Returns:
            logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        """
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        logger = logging.getLogger(self.__class__.__name__)
        logger.setLevel(logging.INFO)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if not logger.handlers:
            # TimedRotatingFileHandler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
            log_file = log_dir / "app.log"
            file_handler = TimedRotatingFileHandler(
                filename=str(log_file),
                when="midnight",  # –†–æ—Ç–∞—Ü–∏—è –≤ –ø–æ–ª–Ω–æ—á—å
                interval=1,  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
                backupCount=30,  # –•—Ä–∞–Ω–∏—Ç—å 30 –¥–Ω–µ–π
                encoding="utf-8",
            )
            file_handler.setLevel(logging.INFO)

            # –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: app.log.20251024
            file_handler.suffix = "%Y%m%d"

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.INFO)

            # –ï–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
            formatter = logging.Formatter(
                "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
            )
            file_handler.setFormatter(formatter)
            console_handler.setFormatter(formatter)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            logger.addHandler(file_handler)
            logger.addHandler(console_handler)

        return logger

    def _log_info(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        if self.logger:
            self.logger.info(message)

    def _log_error(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É."""
        if self.logger:
            self.logger.error(message)

    def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.status.update_operation("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            self._log_info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            self._log_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
            is_valid, validation_report = validate_system(
                self.config_path, check_network=False
            )

            if not is_valid:
                self._log_error(
                    f"–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:\n{validation_report}"
                )
                return False

            self.status.is_validated = True
            self._log_info("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã ‚úì")

            # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (üîß –ë–ê–ì-A3: —É—Å–ª–æ–≤–Ω—ã–π –≤—ã–±–æ—Ä ConfigReader)
            if self.use_secure_config:
                self._log_info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å SecureConfigReader...")
                self.config_reader = create_secure_config_reader(self.config_path)
                self._log_info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π .env ‚úì")
            else:
                self._log_info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å ConfigReader...")
                self.config_reader = ConfigReader(self.config_path)
                self.config_reader.load_config()  # üî• –ë–ê–ì-1 FIX: —è–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                self._log_info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚úì")

            self.status.is_configured = True

            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self._log_info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

            # Bitrix24 –∫–ª–∏–µ–Ω—Ç
            bitrix_config = self.config_reader.get_bitrix_config()
            self.bitrix_client = Bitrix24Client(bitrix_config.webhook_url)
            self._log_info("Bitrix24 –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚úì")

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            self.data_processor = DataProcessor()
            self._log_info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚úì")

            # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel
            self.excel_generator = ExcelReportGenerator()
            self._log_info("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚úì")

            # –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä workflow
            self.workflow_orchestrator = WorkflowOrchestrator(
                bitrix_client=self.bitrix_client,
                data_processor=self.data_processor,
                excel_generator=self.excel_generator,
                config_reader=self.config_reader,
            )
            self._log_info("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä workflow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚úì")

            self.status.is_initialized = True
            self._log_info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

            return True

        except Exception as e:
            handle_error(e, "initialize", "ReportGeneratorApp")
            self._log_error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def generate_report(self, custom_filename: Optional[str] = None) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Args:
            custom_filename: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.status.is_initialized:
                raise ValueError(
                    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞."
                )

            self.status.update_operation("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞")
            self._log_info("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞...")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_path = self.config_reader.get_safe_save_path(custom_filename)
            self._log_info(f"–§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")

            # –ó–∞–ø—É—Å–∫ workflow
            result = self.workflow_orchestrator.execute_full_workflow(save_path)

            if result.success:
                self._log_info(f"–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {save_path}")
                self._log_info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.records_processed}")
                return True
            else:
                self._log_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {result.error_message}")
                return False

        except Exception as e:
            handle_error(e, "generate_report", "ReportGeneratorApp")
            self._log_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            return False

    def validate_configuration(self) -> bool:
        """
        –ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—è —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.

        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            self.status.update_operation("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            self._log_info("–ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

            is_valid, validation_report = validate_system(
                self.config_path, check_network=True
            )

            if is_valid:
                self._log_info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞ ‚úì")
                self._log_info(validation_report)
            else:
                self._log_error("–û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                self._log_error(validation_report)

            return is_valid

        except Exception as e:
            handle_error(e, "validate_configuration", "ReportGeneratorApp")
            self._log_error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False

    def test_api_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitrix24 API.

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.bitrix_client:
                raise ValueError("Bitrix24 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            self.status.update_operation("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            self._log_info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24...")

            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            stats = self.bitrix_client.get_stats()

            self._log_info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitrix24 —É—Å–ø–µ—à–Ω–æ ‚úì")
            self._log_info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API: {stats}")

            return True

        except Exception as e:
            handle_error(e, "test_api_connection", "ReportGeneratorApp")
            self._log_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False

    def get_app_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.

        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """
        runtime_info = get_runtime_info()
        error_summary = self.error_handler.get_error_summary()

        return {
            "app_name": APP_NAME,
            "app_version": APP_VERSION,
            "status": {
                "is_initialized": self.status.is_initialized,
                "is_configured": self.status.is_configured,
                "is_validated": self.status.is_validated,
                "last_operation": self.status.last_operation,
                "last_operation_time": (
                    self.status.last_operation_time.isoformat()
                    if self.status.last_operation_time
                    else None
                ),
                "errors_count": error_summary.get("total_errors", 0),
            },
            "configuration": {
                "config_path": self.config_path,
                "logging_enabled": self.enable_logging,
            },
            "runtime": runtime_info,
            "components": {
                "config_reader": self.config_reader is not None,
                "bitrix_client": self.bitrix_client is not None,
                "data_processor": self.data_processor is not None,
                "excel_generator": self.excel_generator is not None,
                "workflow_orchestrator": self.workflow_orchestrator is not None,
            },
        }

    def get_error_report(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–∞—Ö.

        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–∞—Ö
        """
        return generate_error_report()

    def shutdown(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            self.status.update_operation("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            self._log_info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if self.bitrix_client:
                self.bitrix_client.close()
                self._log_info("Bitrix24 –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç ‚úì")

            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            if self.workflow_orchestrator:
                self.workflow_orchestrator.cleanup()
                self._log_info("Workflow –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—á–∏—â–µ–Ω ‚úì")

            self._log_info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        except Exception as e:
            handle_error(e, "shutdown", "ReportGeneratorApp")
            self._log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ context manager."""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ context manager."""
        self.shutdown()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –±—ã–ª–æ
        if exc_type:
            handle_error(exc_val, "__exit__", "ReportGeneratorApp")
            return False  # –ù–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ


class AppFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    @staticmethod
    def create_app(
        config_path: str = "config.ini",
        enable_logging: bool = True,
        auto_initialize: bool = True,
        use_secure_config: bool = True,
    ) -> ReportGeneratorApp:
        """
        –°–æ–∑–¥–∞—ë—Ç –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            enable_logging: –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            auto_initialize: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            use_secure_config: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SecureConfigReader —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π .env (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)

        Returns:
            ReportGeneratorApp: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        # üîß –ë–ê–ì-A3: –ü–µ—Ä–µ–¥–∞—á–∞ use_secure_config –≤ ReportGeneratorApp
        app = ReportGeneratorApp(config_path, enable_logging, use_secure_config)

        if auto_initialize:
            success = app.initialize()
            if not success:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

        return app

    @staticmethod
    def create_for_testing(
        config_data: Optional[Dict[str, Any]] = None,
    ) -> ReportGeneratorApp:
        """
        –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            config_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Returns:
            ReportGeneratorApp: –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        import tempfile
        import configparser

        if config_data is None:
            from ..config.settings import TestSettings

            config_data = TestSettings.TEST_CONFIG_DATA

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ config —Ñ–∞–π–ª–∞
        with tempfile.NamedTemporaryFile(mode="w", suffix=".ini", delete=False) as f:
            config = configparser.ConfigParser()

            for section, values in config_data.items():
                config.add_section(section)
                for key, value in values.items():
                    config.set(section, key, value)

            config.write(f)
            temp_config_path = f.name

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        app = ReportGeneratorApp(temp_config_path, enable_logging=False)

        return app


def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
    """
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ {APP_NAME} v{APP_VERSION}")
        print("=" * 50)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        with AppFactory.create_app() as app:

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            app_info = app.get_app_info()
            print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {app_info['configuration']['config_path']}")
            print(f"üêç Python: {app_info['runtime']['python_version']}")
            print("")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not app.validate_configuration():
                print("‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                sys.exit(1)

            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
            if not app.test_api_connection():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bitrix24 API.")
                sys.exit(1)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
            print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
            if app.generate_report():
                print("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞.")
                error_report = app.get_error_report()
                print("\n" + error_report)
                sys.exit(1)

        print("\nüéâ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        handle_error(e, "main", "main_function")
        sys.exit(1)


if __name__ == "__main__":
    main()
