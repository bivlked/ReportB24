"""
–ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç—á–µ—Ç–∞.

–†–µ–∞–ª–∏–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π Excel –æ—Ç—á–µ—Ç–∞,
–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
"""

import logging
from dataclasses import dataclass, field
from typing import List, Dict, Any
from datetime import datetime

logger = logging.getLogger(__name__)


@dataclass
class ValidationIssue:
    """–û–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""

    record_id: str
    field: str
    issue_type: str  # 'missing', 'invalid', 'suspicious', 'critical'
    message: str

    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
        emoji = {
            "missing": "‚ö†Ô∏è",
            "invalid": "‚ùå",
            "suspicious": "üîç",
            "critical": "üî•",
        }.get(self.issue_type, "‚ÑπÔ∏è")
        return f"{emoji} [{self.record_id}] {self.field}: {self.message}"


@dataclass
class ValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""

    total_records: int
    valid_records: int
    issues: List[ValidationIssue] = field(default_factory=list)

    def has_issues(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã."""
        return len(self.issues) > 0

    def has_critical_issues(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
        return any(i.issue_type == "critical" for i in self.issues)

    @property
    def invalid_records(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."""
        return self.total_records - self.valid_records

    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        if self.total_records == 0:
            return 100.0
        return (self.valid_records / self.total_records) * 100


@dataclass
class QualityMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç—á—ë—Ç–∞."""

    brief_total: int
    brief_valid: int
    brief_issues: List[ValidationIssue] = field(default_factory=list)

    detailed_total: int = 0
    detailed_valid: int = 0
    detailed_issues: List[ValidationIssue] = field(default_factory=list)

    generation_time: str = ""
    generator_version: str = "2.5.0"

    def __post_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π."""
        if not self.generation_time:
            self.generation_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

    @property
    def total_issues(self) -> int:
        """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º."""
        return len(self.brief_issues) + len(self.detailed_issues)

    @property
    def brief_success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        if self.brief_total == 0:
            return 100.0
        return (self.brief_valid / self.brief_total) * 100

    @property
    def detailed_success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        if self.detailed_total == 0:
            return 100.0
        return (self.detailed_valid / self.detailed_total) * 100

    def has_critical_issues(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
        all_issues = self.brief_issues + self.detailed_issues
        return any(i.issue_type == "critical" for i in all_issues)

    def to_summary(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏."""
        # –°–∏–º–≤–æ–ª—ã —Å—Ç–∞—Ç—É—Å–∞
        brief_icon = (
            "‚úÖ"
            if self.brief_success_rate >= 90
            else "‚ö†Ô∏è" if self.brief_success_rate >= 70 else "‚ùå"
        )
        detailed_icon = (
            "‚úÖ"
            if self.detailed_success_rate >= 90
            else "‚ö†Ô∏è" if self.detailed_success_rate >= 70 else "‚ùå"
        )

        return f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           üìä –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê –û–¢–ß–Å–¢–ê                      ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë {brief_icon} –õ–∏—Å—Ç "–ö—Ä–∞—Ç–∫–∏–π":                                       ‚ïë
‚ïë   ‚îî‚îÄ –ó–∞–ø–∏—Å–µ–π: {self.brief_valid}/{self.brief_total} –≤–∞–ª–∏–¥–Ω—ã—Ö ({self.brief_success_rate:.1f}%)    ‚ïë
‚ïë                                                           ‚ïë
‚ïë {detailed_icon} –õ–∏—Å—Ç "–ü–æ–ª–Ω—ã–π":                                        ‚ïë
‚ïë   ‚îî‚îÄ –ó–∞–ø–∏—Å–µ–π: {self.detailed_valid}/{self.detailed_total} –≤–∞–ª–∏–¥–Ω—ã—Ö ({self.detailed_success_rate:.1f}%)  ‚ïë
‚ïë                                                           ‚ïë
‚ïë –ü—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {self.total_issues}                               ‚ïë
‚ïë –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {self.generation_time}                    ‚ïë
‚ïë –í–µ—Ä—Å–∏—è: {self.generator_version}                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""


class DataQualityValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞."""
        self.logger = logging.getLogger(__name__)

    def validate_brief_data(self, data: List[Dict[str, Any]]) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞.

        Args:
            data: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞

        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        """
        issues = []
        valid_count = 0

        for idx, record in enumerate(data):
            record_id = record.get("account_number", f"–ó–∞–ø–∏—Å—å_{idx + 1}")
            has_issues = False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not record.get("account_number"):
                issues.append(
                    ValidationIssue(
                        record_id=record_id,
                        field="account_number",
                        issue_type="critical",
                        message="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞",
                    )
                )
                has_issues = True

            if not record.get("inn"):
                issues.append(
                    ValidationIssue(
                        record_id=record_id,
                        field="inn",
                        issue_type="missing",
                        message="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ò–ù–ù",
                    )
                )
                has_issues = True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            inn_value = record.get("inn", "")
            if inn_value in ["–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "–û—à–∏–±–∫–∞", "ERROR", ""]:
                issues.append(
                    ValidationIssue(
                        record_id=record_id,
                        field="inn",
                        issue_type="suspicious",
                        message=f'–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ù–ù: "{inn_value}"',
                    )
                )
                has_issues = True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
            if not record.get("counterparty"):
                issues.append(
                    ValidationIssue(
                        record_id=record_id,
                        field="counterparty",
                        issue_type="missing",
                        message="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç",
                    )
                )
                has_issues = True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
            amount = record.get("amount")
            if amount is None or amount <= 0:
                issues.append(
                    ValidationIssue(
                        record_id=record_id,
                        field="amount",
                        issue_type="invalid",
                        message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: {amount}",
                    )
                )
                has_issues = True

            if not has_issues:
                valid_count += 1

        self.logger.debug(
            f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {valid_count}/{len(data)} –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"
        )

        return ValidationResult(
            total_records=len(data), valid_records=valid_count, issues=issues
        )

    def validate_detailed_data(self, data: List[Dict[str, Any]]) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.

        Args:
            data: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        """
        issues = []
        valid_count = 0

        for idx, record in enumerate(data):
            record_id = record.get("account_number", f"–¢–æ–≤–∞—Ä_{idx + 1}")
            has_issues = False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            if not record.get("product_name"):
                issues.append(
                    ValidationIssue(
                        record_id=record_id,
                        field="product_name",
                        issue_type="missing",
                        message="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                    )
                )
                has_issues = True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            quantity = record.get("quantity")
            if quantity is None or quantity <= 0:
                issues.append(
                    ValidationIssue(
                        record_id=record_id,
                        field="quantity",
                        issue_type="invalid",
                        message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
                    )
                )
                has_issues = True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
            price = record.get("price")
            if price is None or price < 0:
                issues.append(
                    ValidationIssue(
                        record_id=record_id,
                        field="price",
                        issue_type="invalid",
                        message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {price}",
                    )
                )
                has_issues = True

            if not has_issues:
                valid_count += 1

        self.logger.debug(
            f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {valid_count}/{len(data)} –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"
        )

        return ValidationResult(
            total_records=len(data), valid_records=valid_count, issues=issues
        )


@dataclass
class ComprehensiveReportResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞."""

    output_path: str
    quality_metrics: QualityMetrics

    def print_summary(self):
        """–ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        print(self.quality_metrics.to_summary())

    def log_issues(self, max_issues: int = 10):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.

        Args:
            max_issues: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞
        """
        all_issues = (
            self.quality_metrics.brief_issues + self.quality_metrics.detailed_issues
        )

        if all_issues:
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(all_issues)}")
            for issue in all_issues[:max_issues]:
                logger.warning(f"  {issue}")

            if len(all_issues) > max_issues:
                remaining = len(all_issues) - max_issues
                logger.warning(f"  ... –∏ –µ—â—ë {remaining} –ø—Ä–æ–±–ª–µ–º(–∞)")
