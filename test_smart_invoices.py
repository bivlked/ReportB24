#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–µ—Ä Smart Invoices - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
"""

import configparser
from src.bitrix24_client.client import Bitrix24Client


def test_smart_invoices():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ Smart Invoices"""
    
    print("üß™ –¢–µ—Å—Ç–µ—Ä Smart Invoices")
    print("=" * 40)
    
    # –ß–∏—Ç–∞–µ–º config
    config = configparser.ConfigParser()
    config.read('config.ini', encoding='utf-8')
    webhook_url = config.get('BitrixAPI', 'webhookurl')
    
    print(f"üåê Webhook: {webhook_url[:50]}...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = Bitrix24Client(webhook_url)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º Smart Invoices –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ 5)
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 5 Smart Invoices...")
        invoices = client.get_smart_invoices(entity_type_id=31)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(invoices)} Smart Invoices")
        
        if invoices:
            print("\nüìÑ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Å—á—ë—Ç–∞:")
            first_invoice = invoices[0]
            
            for key, value in first_invoice.items():
                print(f"   {key}: {value}")
            
            print(f"\nüîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ —Å—á—ë—Ç–µ:")
            fields = list(first_invoice.keys())
            print(f"   –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(fields)}")
            for i, field in enumerate(fields[:10]):  # –ü–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
                print(f"   {i+1}. {field}")
            if len(fields) > 10:
                print(f"   ... –∏ –µ—â—ë {len(fields)-10} –ø–æ–ª–µ–π")
                
        else:
            print("‚ùå Smart Invoices –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        client.close()
    
    print("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter...")
    input()


if __name__ == "__main__":
    test_smart_invoices() 