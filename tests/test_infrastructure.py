"""
–¢–µ—Å—Ç—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.
–ü—Ä–æ–≤–µ—Ä—è—é—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
"""
import pytest
import sys
from pathlib import Path


class TestInfrastructure:
    """–¢–µ—Å—Ç—ã –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def test_python_version(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python 3.12"""
        assert sys.version_info >= (3, 12), f"Python 3.12+ required, got {sys.version_info}"
    
    def test_project_structure(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        project_root = Path(__file__).parent.parent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        assert (project_root / ".gitignore").exists(), ".gitignore –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        assert (project_root / "pytest.ini").exists(), "pytest.ini –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: tasks.md –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ memory-bank/ (COMP-1)
        assert (project_root / "memory-bank" / "tasks.md").exists(), "memory-bank/tasks.md –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        assert (project_root / "config.ini").exists(), "config.ini –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    def test_virtual_environment_active(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        import sys
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ì-5: –ì–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª—é–±–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ venv
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ª—é–±–æ–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
        is_venv = (
            hasattr(sys, 'real_prefix') or  # virtualenv
            (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)  # venv
        )
        assert is_venv, f"–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ: {sys.executable}"
    
    def test_pytest_coverage_setup(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ coverage"""
        try:
            import coverage
            assert True, "Coverage module –¥–æ—Å—Ç—É–ø–µ–Ω"
        except ImportError:
            pytest.fail("Coverage module –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def test_basic_calculations(self):
        """–¢–µ—Å—Ç: –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ pytest"""
        assert 2 + 2 == 4
        assert 10 * 0.1 == 1.0
        assert round(3.14159, 2) == 3.14


@pytest.mark.unit
def test_dummy_function():
    """–ü—Ä–æ—Å—Ç–æ–π dummy —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    def dummy_add(a, b):
        return a + b
    
    assert dummy_add(2, 3) == 5
    assert dummy_add(-1, 1) == 0
    assert dummy_add(0, 0) == 0


if __name__ == "__main__":
    pytest.main([__file__]) 