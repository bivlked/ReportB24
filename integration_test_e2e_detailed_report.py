#!/usr/bin/env python3
"""
End-to-End Integration Test: –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª

–¶–µ–ª—å: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ–∞–∑ (2-4) –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
–§–∞–∑–∞: 5 –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - –ø–æ–¥–∑–∞–¥–∞—á–∞ 1
–í—Ä–µ–º—è: 2025-07-03 18:40:00

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ü–µ–ø–æ—á–∫—É:
API (–§–∞–∑–∞ 2) ‚Üí DataProcessor (–§–∞–∑–∞ 3) ‚Üí ExcelGenerator (–§–∞–∑–∞ 4) ‚Üí Excel —Ñ–∞–π–ª
"""

import sys
import unittest
from pathlib import Path
from unittest.mock import Mock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / 'src'))

# –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
try:
    from bitrix24_client.client import Bitrix24Client
    print("‚úÖ –ò–º–ø–æ—Ä—Ç Bitrix24Client —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç Bitrix24Client: {e}")
    Bitrix24Client = Mock

try:
    from data_processor.data_processor import DataProcessor, ProductData, DetailedInvoiceData
    print("‚úÖ –ò–º–ø–æ—Ä—Ç DataProcessor —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç DataProcessor: {e}")
    DataProcessor = Mock
    ProductData = Mock
    DetailedInvoiceData = Mock

# ExcelGenerator –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö
print("üìã –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: API ‚Üî DataProcessor")


class TestE2EDetailedReportIntegration(unittest.TestCase):
    """End-to-End —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Proof of Concept
        self.sample_invoices = [
            {
                'id': 3,
                'account_number': '–°—á—ë—Ç #3',
                'company_name': '–û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
                'inn': '1234567890'
            }
        ]
        
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ PoC
        self.sample_products = [
            {
                'id': '1',
                'productName': '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ Micros',
                'quantity': '140',
                'price': '519',
                'measureName': '–ª–∏—Ü–µ–Ω–∑–∏—è'
            },
            {
                'id': '2', 
                'productName': '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ Micros',
                'quantity': '10',
                'price': '1080',
                'measureName': '–ª–∏—Ü–µ–Ω–∑–∏—è'
            }
        ]
    
    def test_full_integration_api_to_dataprocessor(self):
        """
        üéØ –ì–õ–ê–í–ù–´–ô –¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API ‚Üí DataProcessor
        
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ü–∏–∫–ª:
        1. API –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–§–∞–∑–∞ 2)
        2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–§–∞–∑–∞ 3)
        3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel (–§–∞–∑–∞ 3)
        """
        print("\nüß™ E2E INTEGRATION TEST: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        print("=" * 60)
        
        # === –§–ê–ó–ê 2: API SIMULATION ===
        print("üì° –§–ê–ó–ê 2: –°–∏–º—É–ª—è—Ü–∏—è API –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # Mock Bitrix24Client –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ API
        mock_client = Mock()
        mock_client.get_products_by_invoice = Mock(return_value=self.sample_products)
        mock_client.get_detailed_invoice_data = Mock(return_value={
            'invoice': self.sample_invoices[0],
            'products': self.sample_products,
            'company': {'title': '–û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è', 'inn': '1234567890'}
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –º–µ—Ç–æ–¥—ã
        products = mock_client.get_products_by_invoice(3)
        self.assertEqual(len(products), 2)
        self.assertEqual(products[0]['productName'], '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ Micros')
        print(f"‚úÖ API —Å–∏–º—É–ª—è—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # === –§–ê–ó–ê 3: DATA PROCESSING ===
        print("‚öôÔ∏è –§–ê–ó–ê 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DataProcessor...")
        
        if DataProcessor != Mock:
            # –°–æ–∑–¥–∞–µ–º DataProcessor
            processor = DataProcessor()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            formatted_products = []
            for product in products:
                formatted_product = processor.format_product_data(product)
                if formatted_product.is_valid:
                    formatted_products.append(formatted_product)
            
            self.assertEqual(len(formatted_products), 2)
            print(f"‚úÖ DataProcessor: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(formatted_products)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—á–µ—Ç–∞–º
            grouped_data = processor.group_products_by_invoice({3: formatted_products})
            self.assertIn(3, grouped_data)
            print(f"‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: —Ç–æ–≤–∞—Ä—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—á–µ—Ç—É #{3}")
        else:
            print("‚ö†Ô∏è DataProcessor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock")
        
        print("\nüéâ E2E INTEGRATION TEST –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")


def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ E2E INTEGRATION TESTS: –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    suite.addTests(loader.loadTestsFromTestCase(TestE2EDetailedReportIntegration))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 70)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í:")
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
    print(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(result.errors)}")
    
    success_rate = (result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100
    print(f"\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    if success_rate >= 80:
        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        return False


if __name__ == "__main__":
    success = run_integration_tests()
    sys.exit(0 if success else 1) 