#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ Bitrix24.
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥.
"""

import sys
import os
import configparser
import traceback


def generate_report_simple():
    """–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞."""
    
    print("üöÄ –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ Bitrix24")
    print("=" * 50)
    
    try:
        # –ß–∏—Ç–∞–µ–º config.ini
        print("üìÅ –ß—Ç–µ–Ω–∏–µ config.ini...")
        config = configparser.ConfigParser()
        config.read('config.ini', encoding='utf-8')
        
        webhook_url = config.get('BitrixAPI', 'webhookurl')
        save_folder = config.get('AppSettings', 'defaultsavefolder')
        filename = config.get('AppSettings', 'defaultfilename')
        start_date = config.get('ReportPeriod', 'startdate')
        end_date = config.get('ReportPeriod', 'enddate')
        
        print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   üåê Bitrix24: {webhook_url[:50]}...")
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        print(f"   üìÇ –ü–∞–ø–∫–∞: {save_folder}")
        print(f"   üìÑ –§–∞–π–ª: {filename}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs(save_folder, exist_ok=True)
        save_path = os.path.join(save_folder, filename)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
        print("\nüß™ –¢–µ—Å—Ç API...")
        import requests
        response = requests.get(f"{webhook_url}profile", timeout=10)
        if response.status_code != 200:
            print(f"‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
        print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        from src.config.config_reader import create_config_reader
        from src.bitrix24_client.client import Bitrix24Client
        from src.data_processor.data_processor import DataProcessor
        from src.excel_generator.generator import ExcelReportGenerator
        from src.core.workflow import WorkflowOrchestrator
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        config_reader = create_config_reader('config.ini')
        bitrix_client = Bitrix24Client(webhook_url)
        data_processor = DataProcessor()
        excel_generator = ExcelReportGenerator()
        
        workflow = WorkflowOrchestrator(
            bitrix_client=bitrix_client,
            data_processor=data_processor,
            excel_generator=excel_generator,
            config_reader=config_reader
        )
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
        print(f"\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –≤ {save_path}...")
        result = workflow.execute_full_workflow(save_path)
        
        if result.success:
            print("üéâ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –§–∞–π–ª: {save_path}")
            print(f"üìä –ó–∞–ø–∏—Å–µ–π: {result.records_processed}")
            
            if os.path.exists(save_path):
                size = os.path.getsize(save_path)
                print(f"üì¶ –†–∞–∑–º–µ—Ä: {size:,} –±–∞–π—Ç")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            print(f"üìù –û—à–∏–±–∫–∞: {result.error_message}")
            return False
            
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = generate_report_simple()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ –ì–û–¢–û–í–û! –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω!")
        print("üìÇ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É reports/")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
    
    print("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter...")
    input()
    
    return success


if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1) 