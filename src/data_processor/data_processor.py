"""
Main Data Processor - –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: INN, Date, Currency.
"""

from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
import logging

from .inn_processor import INNProcessor
from .date_processor import DateProcessor
from .currency_processor import CurrencyProcessor
from .validation_helpers import safe_decimal, safe_float  # –ë–ê–ì-2 FIX

logger = logging.getLogger(__name__)


@dataclass
class InvoiceData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å—á—ë—Ç–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    invoice_number: Optional[str] = None
    inn: Optional[str] = None
    counterparty: Optional[str] = None
    amount: Optional[Decimal] = None
    vat_amount: Optional[Decimal] = None
    invoice_date: Optional[datetime] = None

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    inn_valid: bool = False
    dates_valid: bool = False
    amounts_valid: bool = False

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    formatted_inn: Optional[str] = None
    formatted_amount: Optional[str] = None
    formatted_invoice_date: Optional[str] = None

    # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validation_errors: List[str] = None

    def __post_init__(self):
        if self.validation_errors is None:
            self.validation_errors = []


@dataclass
class ProcessedInvoice:
    """
    –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (v2.4.0).
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –í—Å–µ —Å—É–º–º—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ Decimal –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Excel.
    
    üî• –ë–ê–ì-8 FIX: invoice_date –∏ shipping_date —Ç–µ–ø–µ—Ä—å Optional[datetime].
    –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç—ã –ù–ï –ø–æ–¥–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ datetime.now(), —á—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.
    """
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    account_number: str
    inn: str
    counterparty: str
    amount: Decimal  # –ß–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø –¥–ª—è Excel!
    vat_amount: Decimal | str  # Decimal –∏–ª–∏ "–Ω–µ—Ç"
    invoice_date: Optional[datetime]  # –ë–ê–ì-8 FIX: Optional –¥–ª—è —á–µ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    shipping_date: Optional[datetime]  # –ë–ê–ì-8 FIX: Optional –¥–ª—è —á–µ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    payment_date: Optional[datetime]
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    is_unpaid: bool
    is_valid: bool = True
    validation_errors: List[str] = field(default_factory=list)
    
    def _determine_vat_rate(self) -> str:
        """
        üî• –ë–ê–ì-4 FIX: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ù–î–° –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        
        Returns:
            "no_vat" - –Ω–µ—Ç –ù–î–° (vat_amount == "–Ω–µ—Ç" –∏–ª–∏ vat_amount == 0)
            "with_vat" - –µ—Å—Ç—å –ù–î–° (vat_amount > 0)
        
        Note:
            –¢–æ–≤–∞—Ä—ã —Å –ù–î–°=0% –¥–æ–ª–∂–Ω—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ "no_vat",
            –∞ –Ω–µ "with_vat" (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏).
        """
        if isinstance(self.vat_amount, str):
            return "no_vat"  # vat_amount == "–Ω–µ—Ç"
        
        if isinstance(self.vat_amount, Decimal):
            return "no_vat" if self.vat_amount == Decimal('0') else "with_vat"
        
        # Fallback –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        return "no_vat"
    
    def to_dict(self) -> Dict[str, Any]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ dict –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
        –î–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–∏, —Å—É–º–º—ã –æ—Å—Ç–∞—é—Ç—Å—è Decimal.
        """
        # üî• –ë–ê–ì-4 FIX: –ò—Å–ø–æ–ª—å–∑—É–µ–º _determine_vat_rate() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        vat_status = self._determine_vat_rate()
        is_no_vat = (vat_status == "no_vat")
        
        return {
            'account_number': self.account_number,
            'inn': self.inn,
            'counterparty': self.counterparty,
            'amount': self.amount,  # Decimal!
            'vat_amount': self.vat_amount,  # Decimal –∏–ª–∏ "–Ω–µ—Ç"
            'invoice_date': self.invoice_date.strftime('%d.%m.%Y') if self.invoice_date else '',
            'shipping_date': self.shipping_date.strftime('%d.%m.%Y') if self.shipping_date else '',
            'payment_date': self.payment_date.strftime('%d.%m.%Y') if self.payment_date else '',
            'is_unpaid': self.is_unpaid,
            'is_valid': self.is_valid,
            'is_no_vat': is_no_vat,
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ExcelReportGenerator
            'amount_numeric': float(self.amount),
            'vat_amount_numeric': float(self.vat_amount) if not is_no_vat else 0,
        }


@dataclass
class ProductData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
    product_id: Optional[str] = None
    product_name: Optional[str] = None
    price: Optional[Decimal] = None
    quantity: Optional[Decimal] = None
    unit_measure: Optional[str] = None

    # –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    total_amount: Optional[Decimal] = None
    vat_amount: Optional[Decimal] = None
    vat_rate: Optional[str] = None

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    formatted_price: Optional[str] = None
    formatted_quantity: Optional[str] = None
    formatted_total: Optional[str] = None
    formatted_vat: Optional[str] = None

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid: bool = False
    validation_errors: List[str] = None

    def __post_init__(self):
        if self.validation_errors is None:
            self.validation_errors = []


@dataclass
class DetailedInvoiceData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—á–µ—Ç–∞
    invoice_info: Dict[str, Any] = None
    products: List[ProductData] = None
    company_name: Optional[str] = None
    inn: Optional[str] = None

    # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    total_products: int = 0
    total_amount: Optional[Decimal] = None
    total_vat: Optional[Decimal] = None

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    account_number: Optional[str] = None
    processing_timestamp: Optional[datetime] = None

    def __post_init__(self):
        if self.products is None:
            self.products = []
        if self.processing_timestamp is None:
            self.processing_timestamp = datetime.now()


class DataProcessor:
    """
    –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–Ω–Ω—ã—Ö - –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.

    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:
    - INNProcessor: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ù–ù
    - DateProcessor: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    - CurrencyProcessor: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç –∏ —Ä–∞—Å—á—ë—Ç –ù–î–°
    """

    def __init__(self, default_currency: str = "RUB", bitrix_client=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        self.inn_processor = INNProcessor()
        self.date_processor = DateProcessor()
        self.currency_processor = CurrencyProcessor(default_currency)

        self.default_currency = default_currency

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Bitrix24Client –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        self._bitrix_client = bitrix_client

    def set_bitrix_client(self, bitrix_client):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Bitrix24Client –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤

        Args:
            bitrix_client: –≠–∫–∑–µ–º–ø–ª—è—Ä Bitrix24Client
        """
        self._bitrix_client = bitrix_client

    def process_invoice_batch(self, raw_invoices: List[Dict[str, Any]]) -> List[ProcessedInvoice]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç batch —Å—á–µ—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (v2.4.0).
        
        –ù–æ–≤–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: DataProcessor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ,
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ProcessedInvoice —Å Decimal —Ç–∏–ø–∞–º–∏ –¥–ª—è Excel.
        
        Args:
            raw_invoices: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–æ–≤ –∏–∑ Bitrix24
            
        Returns:
            List[ProcessedInvoice]: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏
        """
        processed = []
        for invoice in raw_invoices:
            try:
                processed_invoice = self._process_single_invoice(invoice)
                processed.append(processed_invoice)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–∞ {invoice.get('id', 'N/A')}: {e}")
                # –ë–ê–ì-8 FIX: –°–æ–∑–¥–∞–µ–º invalid invoice —Å None –¥–ª—è –¥–∞—Ç (–Ω–µ –ø–æ–¥–º–µ–Ω—è–µ–º)
                invalid = ProcessedInvoice(
                    account_number=invoice.get('accountNumber', 'N/A'),
                    inn='ERROR',
                    counterparty='ERROR',
                    amount=Decimal('0'),
                    vat_amount='ERROR',
                    invoice_date=None,  # –ë–ê–ì-8 FIX: None –≤–º–µ—Å—Ç–æ datetime.now()
                    shipping_date=None,  # –ë–ê–ì-8 FIX: None –≤–º–µ—Å—Ç–æ datetime.now()
                    payment_date=None,
                    is_unpaid=True,
                    is_valid=False,
                    validation_errors=[str(e)]
                )
                processed.append(invalid)
        
        return processed
    
    def _process_single_invoice(self, invoice: Dict[str, Any]) -> ProcessedInvoice:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞ (v2.4.0).
        
        Args:
            invoice: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
            
        Returns:
            ProcessedInvoice: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—á–µ—Ç —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        """
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        account_number = invoice.get('accountNumber', '')
        
        # üî• –ë–ê–ì-2 FIX: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        amount = safe_decimal(invoice.get('opportunity'), '0')
        tax_val = safe_float(invoice.get('taxValue'), 0.0)
        vat_amount = safe_decimal(tax_val, '0') if tax_val > 0 else "–Ω–µ—Ç"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º DateProcessor)
        invoice_date = self._parse_date(invoice.get('begindate'))
        shipping_date = self._parse_date(invoice.get('UFCRM_SMART_INVOICE_1651168135187'))
        payment_date = self._parse_date(invoice.get('UFCRM_626D6ABE98692'))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        counterparty = self._extract_smart_invoice_counterparty(invoice)
        if not counterparty:
            counterparty = invoice.get('title', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
        
        inn = self._extract_smart_invoice_inn(invoice)
        if not inn:
            inn = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        validation_errors = []
        is_valid = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
        if not account_number or account_number.strip() == '':
            validation_errors.append('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞')
            is_valid = False
        
        if inn in ['–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω', 'ERROR'] or not inn:
            validation_errors.append('–ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω')
            is_valid = False
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ò–ù–ù —á–µ—Ä–µ–∑ InnProcessor
            inn_result = self.inn_processor.validate_inn(inn)
            if not inn_result.is_valid:
                validation_errors.append(f'–ò–ù–ù –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {inn_result.error_message}')
                is_valid = False
        
        if amount <= Decimal('0'):
            validation_errors.append('–°—É–º–º–∞ —Å—á–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è')
            is_valid = False
        
        # –ë–ê–ì-8 FIX: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç—ã –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ –æ—à–∏–±–∫–∞
        if invoice_date is None:
            validation_errors.append('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ —Å—á–µ—Ç–∞')
            is_valid = False
        
        if shipping_date is None:
            validation_errors.append('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏')
            is_valid = False
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        is_unpaid = payment_date is None
        
        return ProcessedInvoice(
            account_number=account_number,
            inn=inn,
            counterparty=counterparty,
            amount=amount,
            vat_amount=vat_amount,
            invoice_date=invoice_date,  # –ë–ê–ì-8 FIX: –ù–ï –ø–æ–¥–º–µ–Ω—è–µ–º None –Ω–∞ datetime.now()
            shipping_date=shipping_date,  # –ë–ê–ì-8 FIX: –ù–ï –ø–æ–¥–º–µ–Ω—è–µ–º None –Ω–∞ datetime.now()
            payment_date=payment_date,
            is_unpaid=is_unpaid,
            is_valid=is_valid,
            validation_errors=validation_errors
        )
    
    def _parse_date(self, date_str: Optional[str]) -> Optional[datetime]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DateProcessor.
        
        Args:
            date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
            
        Returns:
            Optional[datetime]: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ None
        """
        if not date_str:
            return None
        result = self.date_processor.parse_date(date_str)
        return result.parsed_date if result.is_valid else None

    def process_invoice_record(self, raw_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ Smart Invoice –¥–ª—è workflow.

        üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï (v2.1.2): Dual Data Structure –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ Excel —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –î–í–ê –Ω–∞–±–æ—Ä–∞ –ø–æ–ª–µ–π:
        - amount / vat_amount: —á–∏—Å–ª–∞ (float) –¥–ª—è Excel —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        - amount_formatted / vat_amount_formatted: —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Args:
            raw_data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á—ë—Ç–∞ –∏–∑ Smart Invoices API

        Returns:
            Dict[str, Any]: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Excel
        """
        try:
            # üî• –ë–ê–ì-6 FIX: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            tax_val = safe_float(raw_data.get("taxValue"), 0.0)
            amount_val = safe_float(raw_data.get("opportunity"), 0.0)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            tax_text = "–Ω–µ—Ç" if tax_val == 0 else self._format_amount(tax_val)
            amount_text = self._format_amount(amount_val)

            return {
                "account_number": raw_data.get("accountNumber", ""),
                "inn": self._extract_smart_invoice_inn(raw_data),
                "counterparty": self._extract_smart_invoice_counterparty(raw_data),
                # üî• –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: Dual Data - —á–∏—Å–ª–∞ –¥–ª—è Excel
                "amount": amount_val,  # float –¥–ª—è Excel NUMBER_FORMAT
                "vat_amount": tax_val if tax_val > 0 else "–Ω–µ—Ç",  # float –∏–ª–∏ "–Ω–µ—Ç"
                # üî• –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                "amount_formatted": amount_text,
                "vat_amount_formatted": tax_text,
                # –î–∞—Ç—ã
                "invoice_date": self._format_date(raw_data.get("begindate")),
                "shipping_date": self._format_date(
                    raw_data.get("UFCRM_SMART_INVOICE_1651168135187")
                ),
                "payment_date": self._format_date(raw_data.get("UFCRM_626D6ABE98692")),
                # –§–ª–∞–≥–∏
                "is_unpaid": not bool(
                    raw_data.get("UFCRM_626D6ABE98692")
                ),  # –Ω–µ—Ç –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã = –Ω–µ–æ–ø–ª–∞—á–µ–Ω
                "is_no_vat": tax_text == "–Ω–µ—Ç",  # –§–ª–∞–≥ –¥–ª—è —Å–µ—Ä–æ–π –∑–∞–ª–∏–≤–∫–∏
                "stage_id": raw_data.get("stageId", ""),
                # üîß –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤
                "amount_numeric": amount_val,
                "vat_amount_numeric": tax_val,
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Smart Invoice: {e}")
            return None

    def _extract_smart_invoice_inn(self, raw_data: Dict[str, Any]) -> str:
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ò–ù–ù –¥–ª—è Smart Invoice —á–µ—Ä–µ–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        
        üî• –ë–ê–ì-8 FIX: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WorkflowOrchestrator!
        
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
        1. –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: raw_data['company_inn'] (–∏–∑ Workflow)
        2. API –∑–∞–ø—Ä–æ—Å: get_company_info_by_invoice() (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç)
        3. Fallback: ufCrmInn (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        
        Performance: –°–Ω–∏–∂–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å 3x –¥–æ 1x (66% —É–ª—É—á—à–µ–Ω–∏–µ)
        """
        # üî• –ë–ê–ì-8 FIX: PRIORITY 1 - –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –ë–ê–ì-4 FIX: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –ø–µ—Ä–µ–¥ .strip()
        enriched_inn = (raw_data.get("company_inn") or "").strip()
        if enriched_inn and enriched_inn not in [
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
            "–û—à–∏–±–∫–∞",
            "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç",
            "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞",
        ]:
            logger.debug(f"‚úÖ –ë–ê–ì-8: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ò–ù–ù (–ø—Ä–æ–ø—É—â–µ–Ω API –∑–∞–ø—Ä–æ—Å)")
            return enriched_inn
        
        # PRIORITY 2 - API –∑–∞–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç)
        account_number = raw_data.get("accountNumber", "")
        if account_number and self._bitrix_client is not None:
            try:
                company_name, inn = self._bitrix_client.get_company_info_by_invoice(
                    account_number
                )
                if inn and inn not in [
                    "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                    "–û—à–∏–±–∫–∞",
                    "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤",
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç",
                    "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞",
                ]:
                    logger.info(f"‚ö†Ô∏è –ë–ê–ì-8: API –∑–∞–ø—Ä–æ—Å –ò–ù–ù (–¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –æ–±–æ–≥–∞—â–µ–Ω—ã)")
                    return inn
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ù–ù –¥–ª—è —Å—á–µ—Ç–∞ {account_number}: {e}")
        
        # PRIORITY 3 - Fallback: –ø—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ ufCrmInn
        fallback_inn = raw_data.get("ufCrmInn", "")
        return fallback_inn if fallback_inn else ""

    def _extract_smart_invoice_counterparty(self, raw_data: Dict[str, Any]) -> str:
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –¥–ª—è Smart Invoice —á–µ—Ä–µ–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        
        üî• –ë–ê–ì-8 FIX: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WorkflowOrchestrator!
        
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
        1. –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: raw_data['company_name'] (–∏–∑ Workflow)
        2. API –∑–∞–ø—Ä–æ—Å: get_company_info_by_invoice() (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç)
        
        Performance: –°–Ω–∏–∂–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å 3x –¥–æ 1x (66% —É–ª—É—á—à–µ–Ω–∏–µ)
        """
        # üî• –ë–ê–ì-8 FIX: PRIORITY 1 - –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –ë–ê–ì-4 FIX: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –ø–µ—Ä–µ–¥ .strip()
        enriched_name = (raw_data.get("company_name") or "").strip()
        if enriched_name and enriched_name not in [
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
            "–û—à–∏–±–∫–∞",
            "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç",
            "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞",
        ]:
            logger.debug(f"‚úÖ –ë–ê–ì-8: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (–ø—Ä–æ–ø—É—â–µ–Ω API –∑–∞–ø—Ä–æ—Å)")
            return enriched_name
        
        # PRIORITY 2 - API –∑–∞–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç)
        account_number = raw_data.get("accountNumber", "")
        if account_number and self._bitrix_client is not None:
            try:
                company_name, inn = self._bitrix_client.get_company_info_by_invoice(
                    account_number
                )
                if company_name and company_name not in [
                    "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                    "–û—à–∏–±–∫–∞",
                    "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤",
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç",
                    "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞",
                ]:
                    logger.info(f"‚ö†Ô∏è –ë–ê–ì-8: API –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (–¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –æ–±–æ–≥–∞—â–µ–Ω—ã)")
                    return company_name
            except Exception as e:
                logger.warning(
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å—á–µ—Ç–∞ {account_number}: {e}"
                )
        return ""

    def _format_amount(self, amount) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã"""
        try:
            return f"{float(amount):,.2f}".replace(",", " ").replace(".", ",")
        except:
            return "0,00"

    def _format_date(self, date_str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        if not date_str:
            return ""
        try:
            from datetime import datetime

            d = datetime.fromisoformat(date_str.replace("Z", "+00:00")).date()
            return d.strftime("%d.%m.%Y")
        except:
            return ""

    def process_invoice_data(self, raw_data: Dict[str, Any]) -> InvoiceData:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ —Å—á—ë—Ç–∞.

        Args:
            raw_data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á—ë—Ç–∞ –∏–∑ API

        Returns:
            InvoiceData: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        invoice = InvoiceData()

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—á—ë—Ç–∞
            invoice.invoice_number = self._extract_invoice_number(raw_data)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ù–ù
            self._process_inn(raw_data, invoice)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
            self._process_dates(raw_data, invoice)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º
            self._process_amounts(raw_data, invoice)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
            invoice.counterparty = self._extract_counterparty(raw_data)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            self._validate_invoice(invoice)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á—ë—Ç–∞: {e}")
            invoice.validation_errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        return invoice

    def _extract_invoice_number(self, raw_data: Dict[str, Any]) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—á—ë—Ç–∞ (v2.4.0 - optimized)"""
        possible_keys = ["number", "invoice_number", "ACCOUNT_NUMBER"]
        return next((str(raw_data[key]).strip() for key in possible_keys if key in raw_data and raw_data[key]), None)

    def _process_inn(self, raw_data: Dict[str, Any], invoice: InvoiceData) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ù–ù (v2.4.0 - optimized)"""
        possible_keys = ["inn", "INN", "UF_CRM_INN"]
        inn_value = next((raw_data[key] for key in possible_keys if key in raw_data and raw_data[key]), None)

        if inn_value:
            result = self.inn_processor.validate_inn(inn_value)
            invoice.inn = result.inn if result.is_valid else str(inn_value)
            invoice.formatted_inn = (
                result.formatted_inn if result.is_valid else str(inn_value)
            )
            invoice.inn_valid = result.is_valid

            if not result.is_valid:
                invoice.validation_errors.append(
                    f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ò–ù–ù: {result.error_message}"
                )
        else:
            invoice.validation_errors.append("–ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def _process_dates(self, raw_data: Dict[str, Any], invoice: InvoiceData) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç (v2.4.0 - optimized)"""
        date_keys = ["date_bill", "DATE_BILL", "created_time"]
        date_value = next((raw_data[key] for key in date_keys if key in raw_data and raw_data[key]), None)

        if date_value:
            result = self.date_processor.parse_date(date_value)

            if result.is_valid:
                invoice.invoice_date = result.parsed_date
                invoice.formatted_invoice_date = result.formatted_date
                invoice.dates_valid = True
            else:
                invoice.validation_errors.append(
                    f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞: {result.error_message}"
                )

    def _process_amounts(self, raw_data: Dict[str, Any], invoice: InvoiceData) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º (v2.4.0 - optimized)"""
        amount_keys = ["opportunity", "OPPORTUNITY", "amount"]
        amount_value = next((raw_data[key] for key in amount_keys if key in raw_data and raw_data[key] is not None), None)

        if amount_value is not None:
            result = self.currency_processor.parse_amount(amount_value)

            if result.is_valid:
                invoice.amount = result.amount
                invoice.formatted_amount = result.formatted_amount
                invoice.amounts_valid = True

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ù–î–° 20%
                vat_result = self.currency_processor.calculate_vat(
                    result.amount, "20%", amount_includes_vat=True
                )

                if vat_result.is_valid:
                    invoice.vat_amount = vat_result.vat_amount

            else:
                invoice.validation_errors.append(
                    f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞: {result.error_message}"
                )
        else:
            invoice.validation_errors.append("–°—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def _extract_counterparty(self, raw_data: Dict[str, Any]) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (v2.4.0 - optimized)"""
        possible_keys = ["title", "TITLE", "company_title"]
        return next((str(raw_data[key]).strip() for key in possible_keys if key in raw_data and raw_data[key]), None)

    def _validate_invoice(self, invoice: InvoiceData) -> None:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—á—ë—Ç–∞"""
        required_fields = [
            ("invoice_number", "–Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞"),
            ("inn", "–ò–ù–ù"),
            ("counterparty", "–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"),
            ("amount", "—Å—É–º–º–∞"),
        ]

        for field, description in required_fields:
            if not getattr(invoice, field):
                invoice.validation_errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {description}")

    def process_invoice_batch_legacy(
        self, raw_data_list: List[Dict[str, Any]]
    ) -> List[InvoiceData]:
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤ (LEGACY).
        
        DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ process_invoice_batch() –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã v2.4.0.

        Args:
            raw_data_list: –°–ø–∏—Å–æ–∫ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤

        Returns:
            List[InvoiceData]: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
        """
        processed_invoices = []

        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(raw_data_list)} —Å—á–µ—Ç–æ–≤")

        for i, raw_data in enumerate(raw_data_list):
            try:
                invoice = self.process_invoice_data(raw_data)
                processed_invoices.append(invoice)

            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á—ë—Ç–∞ #{i}: {e}")
                error_invoice = InvoiceData()
                error_invoice.validation_errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                processed_invoices.append(error_invoice)

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(processed_invoices)} —Å—á–µ—Ç–æ–≤")

        return processed_invoices

    # ============================================================================
    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–ï–¢–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê - –§–ê–ó–ê 3: –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•
    # ============================================================================

    def process_detailed_invoice_data(
        self, detailed_data: Dict[str, Any]
    ) -> DetailedInvoiceData:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞ –≤–∫–ª—é—á–∞—è —Ç–æ–≤–∞—Ä—ã

        –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å –Ω–æ–≤—ã–º–∏ API –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑ –§–∞–∑—ã 2:
        - get_detailed_invoice_data() —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ productRows
        - –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

        Args:
            detailed_data: –†–µ–∑—É–ª—å—Ç–∞—Ç get_detailed_invoice_data() –∏–∑ Bitrix24Client

        Returns:
            DetailedInvoiceData: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            result = DetailedInvoiceData()

            # 1. –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—á–µ—Ç–∞
            result.invoice_info = detailed_data.get("invoice", {})
            result.company_name = detailed_data.get("company_name", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
            result.inn = detailed_data.get("inn", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
            result.account_number = detailed_data.get("account_number")
            result.total_products = detailed_data.get("total_products", 0)

            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
            raw_products = detailed_data.get("products", [])
            logger.debug(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(raw_products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—á–µ—Ç–∞ {result.account_number}"
            )

            for raw_product in raw_products:
                product = self.format_product_data(raw_product)
                if product and product.is_valid:
                    result.products.append(product)

            # 3. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            self._calculate_invoice_totals(result)

            logger.info(f"–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {len(result.products)} —Ç–æ–≤–∞—Ä–æ–≤")
            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return DetailedInvoiceData()

    def format_product_data(self, raw_product: Dict[str, Any]) -> ProductData:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ productRows (v2.4.0 - refactored).

        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ API crm.item.productrow.list:
        - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        - –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∏ –ù–î–°
        - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞

        Args:
            raw_product: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ productRows

        Returns:
            ProductData: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        """
        product = ProductData()

        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self._extract_product_basics(raw_product, product)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            self._process_product_price(raw_product, product)
            self._process_product_quantity(raw_product, product)
            
            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–∞
            product.total_amount = product.price * product.quantity
            product.formatted_total = f"{float(product.total_amount):,.2f}".replace(",", " ").replace(".", ",")
            
            # –†–∞—Å—á–µ—Ç –ù–î–°
            self._calculate_product_vat(raw_product, product)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞
            self._validate_product(product)
            
            logger.debug(f"–¢–æ–≤–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {product.product_name} - {product.formatted_total}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            product.validation_errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            product.is_valid = False

        return product
    
    def _extract_product_basics(self, raw_product: Dict[str, Any], product: ProductData) -> None:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞."""
        product.product_id = str(raw_product.get("id", "")).strip()
        product_name = str(raw_product.get("productName", "–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")).strip()
        product.product_name = product_name if product_name else "–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        product.unit_measure = str(raw_product.get("measureName", "—à—Ç")).strip()
    
    def _process_product_price(self, raw_product: Dict[str, Any], product: ProductData) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞."""
        price_result = self.currency_processor.parse_amount(raw_product.get("price", 0))
        if price_result.is_valid:
            product.price = price_result.amount
            product.formatted_price = price_result.formatted_amount
        else:
            product.validation_errors.append(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞: {raw_product.get('price')}")
            product.price = Decimal("0")
            product.formatted_price = "0,00"
    
    def _process_product_quantity(self, raw_product: Dict[str, Any], product: ProductData) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞."""
        quantity_result = self.currency_processor.parse_amount(raw_product.get("quantity", 0))
        if quantity_result.is_valid:
            product.quantity = quantity_result.amount
            product.formatted_quantity = f"{float(product.quantity):,.3f}".replace(",", " ").replace(".", ",")
        else:
            product.validation_errors.append(f"–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {raw_product.get('quantity')}")
            product.quantity = Decimal("0")
            product.formatted_quantity = "0,000"
    
    def _calculate_product_vat(self, raw_product: Dict[str, Any], product: ProductData) -> None:
        """
        –†–∞—Å—á–µ—Ç –ù–î–° –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö API.
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        - –°–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ä–æ—Å—Å–∏–π—Å–∫—É—é –ª–æ–≥–∏–∫—É –ù–î–° 20% (Report BIG.py —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞–≤–æ–∫ –ù–î–°
        - –¢–æ–≤–∞—Ä—ã –±–µ–∑ –ù–î–°
        """
        tax_rate = raw_product.get("taxRate", 0)
        tax_included = raw_product.get("taxIncluded", "N") == "Y"

        if tax_rate == 20:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –ù–î–° 20% (–ø–æ –æ–±—Ä–∞–∑—Ü—É Report BIG.py)
            # –í–ê–ñ–ù–û: Report BIG.py –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É /1.2 * 0.2 –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç tax_included
            price = safe_float(product.price, 0.0)  # –ë–ê–ì-7 FIX: –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            quantity = safe_float(product.quantity, 0.0)  # –ë–ê–ì-7 FIX
            total_amount = price * quantity

            # –§–æ—Ä–º—É–ª–∞ Report BIG.py: –í–°–ï–ì–î–ê (price * qty) / 1.2 * 0.2 (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º tax_included)
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: /1.2 * 0.2 = 1/6, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
            vat_amount = total_amount / 6

            product.vat_amount = safe_decimal(round(vat_amount, 2), '0')  # –ë–ê–ì-6 FIX
            product.vat_rate = "20%"
            product.formatted_vat = f"{vat_amount:,.2f}".replace(",", " ").replace(".", ",")
        elif tax_rate and tax_rate > 0:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞–≤–æ–∫ –ù–î–° (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            vat_result = self.currency_processor.calculate_vat(
                product.total_amount,
                f"{tax_rate}%",
                amount_includes_vat=tax_included,
            )
            if vat_result.is_valid:
                product.vat_amount = vat_result.vat_amount
                product.vat_rate = f"{tax_rate}%"
                product.formatted_vat = f"{float(product.vat_amount):,.2f}".replace(",", " ").replace(".", ",")
            else:
                product.vat_amount = Decimal("0")
                product.vat_rate = "0%"
                product.formatted_vat = "–Ω–µ—Ç"
        else:
            # –¢–æ–≤–∞—Ä –±–µ–∑ –ù–î–° (—Ç–µ–∫—Å—Ç "–Ω–µ—Ç" –∫–∞–∫ –≤ Report BIG.py)
            product.vat_amount = Decimal("0")
            product.vat_rate = "0%"
            product.formatted_vat = "–Ω–µ—Ç"
    
    def _validate_product(self, product: ProductData) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞."""
        product.is_valid = bool(
            product.product_name and product.price >= 0 and product.quantity >= 0
        )
        
        if not product.is_valid:
            product.validation_errors.append("–¢–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ—à–µ–ª –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")

    def group_products_by_invoice(
        self, invoices_products: Dict[int, List[Dict[str, Any]]]
    ) -> Dict[int, DetailedInvoiceData]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—á–µ—Ç–∞–º –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏

        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç get_products_by_invoices_batch():
        - –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ invoice_id
        - –°–æ–∑–¥–∞–µ—Ç DetailedInvoiceData –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
        - –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–µ–±—Ä–∞-—ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ Excel

        Args:
            invoices_products: –†–µ–∑—É–ª—å—Ç–∞—Ç get_products_by_invoices_batch()
                               {invoice_id: [products_list]}

        Returns:
            Dict[invoice_id, DetailedInvoiceData]: –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        grouped_data = {}

        logger.info(f"–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è {len(invoices_products)} —Å—á–µ—Ç–æ–≤")

        for invoice_id, raw_products in invoices_products.items():
            try:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                invoice_data = DetailedInvoiceData()
                invoice_data.account_number = f"–°—á–µ—Ç #{invoice_id}"
                invoice_data.total_products = len(raw_products)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                valid_products = []
                for raw_product in raw_products:
                    product = self.format_product_data(raw_product)
                    if product and product.is_valid:
                        valid_products.append(product)

                invoice_data.products = valid_products

                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                self._calculate_invoice_totals(invoice_data)

                grouped_data[invoice_id] = invoice_data

                logger.debug(
                    f"–°—á–µ—Ç {invoice_id}: {len(valid_products)} —Ç–æ–≤–∞—Ä–æ–≤, —Å—É–º–º–∞ {invoice_data.total_amount}"
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—á–µ—Ç–∞ {invoice_id}: {e}")
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å—á–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
                error_data = DetailedInvoiceData()
                error_data.account_number = f"–°—á–µ—Ç #{invoice_id} (–æ—à–∏–±–∫–∞)"
                grouped_data[invoice_id] = error_data

        logger.info(f"–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(grouped_data)} —Å—á–µ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return grouped_data

    def _calculate_invoice_totals(self, invoice_data: DetailedInvoiceData) -> None:
        """
        –†–∞—Å—á–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—á–µ—Ç—É

        Args:
            invoice_data: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not invoice_data.products:
            invoice_data.total_amount = Decimal("0")
            invoice_data.total_vat = Decimal("0")
            return

        total_amount = Decimal("0")
        total_vat = Decimal("0")

        for product in invoice_data.products:
            if product.is_valid:
                total_amount += product.total_amount or Decimal("0")
                total_vat += product.vat_amount or Decimal("0")

        invoice_data.total_amount = total_amount
        invoice_data.total_vat = total_vat

        logger.debug(
            f"–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è {invoice_data.account_number}: "
            f"—Å—É–º–º–∞ {total_amount}, –ù–î–° {total_vat}"
        )

    def format_products_for_excel(
        self, grouped_data: Dict[int, DetailedInvoiceData]
    ) -> List[Dict[str, Any]]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Excel —Å –∑–µ–±—Ä–∞-—ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–æ —Å—á–µ—Ç–∞–º

        –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞:
        - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º –¥–ª—è –∑–µ–±—Ä–∞-—ç—Ñ—Ñ–µ–∫—Ç–∞
        - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞

        Args:
            grouped_data: –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç–∞–º

        Returns:
            List[Dict]: –°—Ç—Ä–æ–∫–∏ –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞
        """
        excel_rows = []

        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Excel: {len(grouped_data)} —Å—á–µ—Ç–æ–≤")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_invoices = sorted(grouped_data.items(), key=lambda x: x[0])

        for invoice_id, invoice_data in sorted_invoices:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
            is_first_product_in_invoice = True
            for product in invoice_data.products:
                if product.is_valid:
                    excel_row = {
                        # –ú–µ—Ç–∞-–ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
                        "invoice_number": (
                            invoice_data.account_number
                            if is_first_product_in_invoice
                            else ""
                        ),
                        "company_name": (
                            (invoice_data.company_name or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                            if is_first_product_in_invoice
                            else ""
                        ),
                        "inn": (
                            (invoice_data.inn or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                            if is_first_product_in_invoice
                            else ""
                        ),
                        "product_name": product.product_name,
                        "quantity": product.formatted_quantity,
                        "unit_measure": product.unit_measure,
                        "price": product.formatted_price,
                        "total_amount": product.formatted_total,
                        "vat_amount": product.formatted_vat,
                        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                        "invoice_id": invoice_id,
                        "is_first_product": is_first_product_in_invoice,
                    }
                    excel_rows.append(excel_row)
                    is_first_product_in_invoice = False  # –°–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –ø–µ—Ä–≤—ã–µ

        logger.info(f"Excel —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(excel_rows)} —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
        return excel_rows

    def format_detailed_products_for_excel(
        self, products: List[Dict[str, Any]], invoice_info: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –ù–î–° –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å –∫—Ä–∞—Ç–∫–∏–º –æ—Ç—á–µ—Ç–æ–º.

        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API crm.item.productrow.list
            invoice_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ (–Ω–æ–º–µ—Ä, –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç, –ò–ù–ù)

        Returns:
            List[Dict]: –°—Ç—Ä–æ–∫–∏ –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        excel_rows = []

        logger.info(
            f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Excel: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤"
        )

        for product in products:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ format_product_data
            product_data = self.format_product_data(product)

            if product_data.is_valid:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è Excel —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
                excel_row = {
                    "invoice_number": invoice_info.get("account_number", ""),
                    "company_name": invoice_info.get("company_name", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"),
                    "inn": invoice_info.get("inn", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"),
                    "product_name": product_data.product_name,
                    "quantity": float(product_data.quantity),  # üî• –ë–ê–ì-9 FIX: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä–æ–±–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    "unit_measure": product_data.unit_measure,
                    "price": float(product_data.price),  # –ß–∏—Å–ª–æ, –Ω–µ —Å—Ç—Ä–æ–∫–∞
                    "total_amount": float(
                        product_data.total_amount
                    ),  # –ß–∏—Å–ª–æ, –Ω–µ —Å—Ç—Ä–æ–∫–∞
                    "vat_amount": (
                        product_data.vat_amount
                        if product_data.vat_amount > 0
                        else "–Ω–µ—Ç"
                    ),  # –ß–∏—Å–ª–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
                    "invoice_id": invoice_info.get("invoice_id"),
                }
                excel_rows.append(excel_row)
            else:
                logger.warning(
                    f"–¢–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {product.get('productName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}"
                )

        logger.info(
            f"–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(excel_rows)} —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"
        )
        return excel_rows
