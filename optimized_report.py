#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ Bitrix24 Excel
–° –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests
import configparser
import time
from datetime import datetime
from pathlib import Path
import openpyxl
from openpyxl import Workbook, load_workbook
from openpyxl.styles import PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter


class OptimizedBitrix24Reporter:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, config_path="config.ini", max_records=10):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"‚è∞ –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {datetime.now().strftime('%Y.%m.%d %H:%M:%S')}")
        self.max_records = max_records
        self.config = configparser.ConfigParser()
        self.config.read(config_path, encoding='utf-8')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.ini
        self.webhook_url = self.config.get('BitrixAPI', 'webhookurl')
        self.save_folder = self.config.get('AppSettings', 'defaultsavefolder', fallback='reports')
        self.file_name = self.config.get('AppSettings', 'defaultfilename', fallback='Optimized_Report.xlsx')
        
        # –ü–µ—Ä–∏–æ–¥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        start_date_str = self.config.get('ReportPeriod', 'startdate', fallback='01.01.2022')
        end_date_str = self.config.get('ReportPeriod', 'enddate', fallback='31.12.2022')
        
        self.start_date = datetime.strptime(start_date_str, "%d.%m.%Y").date()
        self.end_date = datetime.strptime(end_date_str, "%d.%m.%Y").date()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        Path(self.save_folder).mkdir(exist_ok=True)
        
        print(f"üîó Webhook URL: {self.webhook_url}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}")
        print(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.save_folder}")
        print(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {self.file_name}")
        print(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π: {self.max_records} (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")

    def get_company_info_by_invoice(self, invoice_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print(f"  üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —Å—á–µ—Ç–∞ #{invoice_number}...")
        
        try:
            # 1. –ò—â–µ–º —Å—á—ë—Ç –ø–æ –Ω–æ–º–µ—Ä—É
            print(f"    üìã –ü–æ–∏—Å–∫ —Å—á–µ—Ç–∞...")
            resp = requests.get(f"{self.webhook_url}crm.item.list", params={
                'filter[accountNumber]': invoice_number,
                'entityTypeId': 31
            })
            time.sleep(0.5)
            data = resp.json()

            items = data.get('result', {}).get('items', [])
            if not items:
                print(f"    ‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return "–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            inv_id = items[0].get('id')
            print(f"    ‚úÖ –°—á–µ—Ç –Ω–∞–π–¥–µ–Ω, ID: {inv_id}")

            # 2. –ò—â–µ–º –ø—Ä–∏–≤—è–∑–∫—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
            print(f"    üîó –ü–æ–∏—Å–∫ —Å–≤—è–∑–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤...")
            link_resp = requests.get(f"{self.webhook_url}crm.requisite.link.list", params={
                'filter[ENTITY_TYPE_ID]': 31,
                'filter[ENTITY_ID]': inv_id
            })
            time.sleep(0.5)
            link_data = link_resp.json()
            link_items = link_data.get('result', [])
            
            if not link_items:
                print(f"    ‚ö†Ô∏è –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤")
                return "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤", "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"

            req_id = link_items[0].get('REQUISITE_ID')
            print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–∫–≤–∏–∑–∏—Ç ID: {req_id}")

            # 3. –ü–æ–ª—É—á–∞–µ–º —Å–∞–º —Ä–µ–∫–≤–∏–∑–∏—Ç
            print(f"    üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–∞...")
            req_resp = requests.post(f"{self.webhook_url}crm.requisite.get", json={"id": str(req_id)})
            time.sleep(0.5)
            req_data = req_resp.json()
            
            if not req_data.get('result'):
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞")
                return "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞", "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞"

            fields = req_data['result']
            rq_inn = fields.get('RQ_INN', '')
            rq_company = fields.get('RQ_COMPANY_NAME', '')
            rq_name = fields.get('RQ_NAME', '')
            
            print(f"    üìä –ò–ù–ù: {rq_inn}, –ö–æ–º–ø–∞–Ω–∏—è: {rq_company}")

            # 4. –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ –ò–ù–ù
            if rq_inn.isdigit():
                if len(rq_inn) == 10:
                    result = (rq_company, rq_inn)  # –û–û–û/–ó–ê–û
                    print(f"    üè¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –û–û–û/–ó–ê–û")
                elif len(rq_inn) == 12:
                    result = (f"–ò–ü {rq_name}" if rq_name else "–ò–ü (–Ω–µ—Ç –∏–º–µ–Ω–∏)", rq_inn)  # –ò–ü
                    print(f"    üë§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ò–ü")
                else:
                    result = (rq_company, rq_inn)
                    print(f"    ‚ùì –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ò–ù–ù")
            else:
                result = (rq_company, rq_inn)
                print(f"    ‚ö†Ô∏è –ò–ù–ù –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
            
            print(f"    ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[0]} | {result[1]}")
            return result

        except Exception as e:
            print(f"    üí• –û—à–∏–±–∫–∞: {e}")
            return "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"

    def get_smart_invoices_limited(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Smart Invoices –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ Smart Invoices (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {self.max_records} –∑–∞–ø–∏—Å–µ–π)")
        url = f"{self.webhook_url}crm.item.list"
        
        params = {
            'entityTypeId': 31,
            'start': 0,
            'filter': {
                '!stageId': 'DT31_1:D'  # –∏—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ
            },
            'select': [
                'id', 'accountNumber', 'statusId', 'dateBill', 'price',
                'UFCRM_SMART_INVOICE_1651168135187',  # –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏
                'UFCRM_626D6ABE98692',               # –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                'begindate', 'opportunity', 'stageId', 'taxValue'
            ]
        }
        
        print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞...")
        resp = requests.post(url, json=params)
        time.sleep(0.5)
        
        if resp.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {resp.status_code} - {resp.text}")
            return []

        data = resp.json()
        all_items = data.get('result', {}).get('items', [])
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_items)}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        limited_items = all_items[:self.max_records]
        print(f"üî¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(limited_items)} –∑–∞–ø–∏—Å–µ–π")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –æ—Ç–≥—Ä—É–∑–∫–∏
        filtered = []
        for inv in limited_items:
            ship_date_str = inv.get('UFCRM_SMART_INVOICE_1651168135187')
            if ship_date_str:
                try:
                    d = datetime.fromisoformat(ship_date_str.replace('Z', '+00:00')).date()
                    if self.start_date <= d <= self.end_date:
                        filtered.append(inv)
                except ValueError:
                    pass

        print(f"üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç–µ –æ—Ç–≥—Ä—É–∑–∫–∏: {len(filtered)} –∑–∞–ø–∏—Å–µ–π")
        return filtered

    def format_date(self, date_str):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        if not date_str:
            return ""
        try:
            d = datetime.fromisoformat(date_str.replace('Z', '+00:00')).date()
            return d.strftime("%d.%m.%Y")
        except:
            return ""

    def format_currency(self, amount):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        try:
            return f"{float(amount):,.2f}".replace(',', ' ').replace('.', ',')
        except:
            return "0,00"

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–ß–ï–¢–ê")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        invoices = self.get_smart_invoices_limited()
        if not invoices:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return False

        print(f"\nüìù –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• ({len(invoices)} –∑–∞–ø–∏—Å–µ–π)")
        print("-" * 30)

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        ws = wb.active
        ws.title = "–°—á–µ—Ç–∞ (Smart Invoices)"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–ù–æ–º–µ—Ä", "–ò–ù–ù", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–°—É–º–º–∞", "–ù–î–°", "–î–∞—Ç–∞ —Å—á—ë—Ç–∞", "–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏", "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã"]
        ws.append(headers)

        # –¶–≤–µ—Ç–∞
        white_fill = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")
        grey_fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")
        red_fill = PatternFill(start_color="FFC0CB", end_color="FFC0CB", fill_type="solid")
        header_fill = PatternFill(start_color="C4D79B", end_color="C4D79B", fill_type="solid")

        row_index = 2
        
        for i, inv in enumerate(invoices, 1):
            print(f"\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {i}/{len(invoices)}")
            print(f"   ID: {inv.get('id')}, –ù–æ–º–µ—Ä: {inv.get('accountNumber')}")
                
            acc_num = inv.get('accountNumber', '')
            sum_val = self.format_currency(inv.get('opportunity', 0))
            tax_val = float(inv.get('taxValue', 0))
            tax_text = self.format_currency(tax_val) if tax_val != 0 else "–Ω–µ—Ç"

            date_bill = self.format_date(inv.get('begindate'))
            ship_date = self.format_date(inv.get('UFCRM_SMART_INVOICE_1651168135187'))
            pay_date_str = inv.get('UFCRM_626D6ABE98692')
            pay_date = self.format_date(pay_date_str) if pay_date_str else ""

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            comp_name, inn = self.get_company_info_by_invoice(acc_num)

            row_data = [acc_num, inn, comp_name, sum_val, tax_text, date_bill, ship_date, pay_date]
            ws.append(row_data)

            # –¶–≤–µ—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            if pay_date == "":
                fill_color = red_fill
                color_desc = "üî¥ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π"
            elif tax_text == "–Ω–µ—Ç":
                fill_color = grey_fill
                color_desc = "üîò –ë–µ–∑ –ù–î–°"
            else:
                fill_color = white_fill
                color_desc = "‚ö™ –û–±—ã—á–Ω—ã–π"
            
            print(f"   üé® –¶–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏: {color_desc}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
            for col_idx in range(1, len(headers) + 1):
                cell = ws.cell(row=row_index, column=col_idx)
                cell.fill = fill_color

            row_index += 1

        print(f"\nüé® –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï EXCEL")
        print("-" * 20)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        for cell in ws["1:1"]:
            cell.fill = header_fill

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        final_path = Path(self.save_folder) / self.file_name
        wb.save(final_path)
        
        print(f"\n‚úÖ –û–¢–ß–ï–¢ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
        print(f"üìÅ –§–∞–π–ª: {final_path}")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(invoices)}")
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("=" * 60)
    print("üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –û–¢–ß–ï–¢–û–í BITRIX24")
    print("=" * 60)
    
    try:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        max_records = input("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
        if not max_records:
            max_records = 5
        else:
            max_records = int(max_records)
        
        reporter = OptimizedBitrix24Reporter(max_records=max_records)
        success = reporter.generate_report()
        
        if success:
            print("\nüéâ –û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
        else:
            print("\n‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –û–¢–ß–ï–¢–ê")
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    main() 