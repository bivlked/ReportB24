#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Bitrix24.

–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º,
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º-—ç—Ç–∞–ª–æ–Ω–∞–º.
"""

from typing import List, Dict, Any, Optional
import os
from pathlib import Path
from openpyxl import Workbook
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from datetime import datetime
import logging

from .styles import ExcelStyles, ColumnStyleConfig
from .layout import WorksheetBuilder, ReportLayout
from .formatter import ExcelDataFormatter, ExcelSummaryFormatter, DataValidator


class ExcelReportGenerator:
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel –æ—Ç—á–µ—Ç–æ–≤.
    
    –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç—ã —Å –ø–æ–ª–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º-—ç—Ç–∞–ª–æ–Ω–∞–º:
    - –û—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–ª–µ–≤–∞
    - –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–Ω–∏–∏ 
    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ –≥—Ä–∞–Ω–∏—Ü—ã
    - –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
    - –ß–∏—Å–ª–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –ò—Ç–æ–≥–∏ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ 04.png
    """
    
    def __init__(self):
        self.styles = ExcelStyles()
        self.layout = ReportLayout()
        self.worksheet_builder = WorksheetBuilder()
        self.data_formatter = ExcelDataFormatter()
        self.summary_formatter = ExcelSummaryFormatter()
        self.validator = DataValidator()
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤ (–Ω–∞—á–∏–Ω–∞–µ–º —Å B2 –≤–º–µ—Å—Ç–æ A1)
        self.start_row = 2  # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        self.start_col = 2  # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ (—Å—Ç–æ–ª–±–µ—Ü B)
    
    def create_report(self, data: List[Dict[str, Any]], output_path: str) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π Excel –æ—Ç—á–µ—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Args:
            data: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–æ–≤
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        """
        try:
            self.logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞: {len(data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
            wb = Workbook()  
            ws = wb.active
            ws.title = "–ö—Ä–∞—Ç–∫–∏–π"  # 7. –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–ö—Ä–∞—Ç–∫–∏–π"
            
            # 1. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            self._add_headers(ws)
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            self._add_data_rows(ws, data)
            
            # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤–æ–∫—Ä—É–≥ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏—Ç–æ–≥–æ–≤)
            self._apply_data_table_borders(ws, len(data))
            
            # 4. –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ 04.png (–í–ù–ï –∂–∏—Ä–Ω–æ–π —Ä–∞–º–∫–∏)
            self._add_summary_section_new_format(ws, data)
            
            # 5. –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            self._freeze_headers(ws)
            
            # 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∞–≤—Ç–æ—à–∏—Ä–∏–Ω–æ–π
            self._adjust_column_widths_auto(ws, data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            wb.save(output_path)
            self.logger.info(f"‚úÖ Excel –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞: {e}")
            raise
    
    def _add_headers(self, ws) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        headers = self.layout.get_column_headers()
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ø–æ–∑–∏—Ü–∏–∏ (start_row, start_col)
        for col_idx, header in enumerate(headers):
            cell = ws.cell(
                row=self.start_row, 
                column=self.start_col + col_idx, 
                value=header
            )
            
            # 6. –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ #FCE4D6 (Orange, Accent 2, Lighter 80%)
            cell.font = Font(bold=True, color="000000")  # –ñ–∏—Ä–Ω—ã–π —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            cell.fill = PatternFill(start_color="FCE4D6", end_color="FCE4D6", fill_type="solid")  # –ù–æ–≤—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ñ–æ–Ω
            cell.alignment = Alignment(horizontal="center", vertical="center")  # –ü–æ —Ü–µ–Ω—Ç—Ä—É
            
            # –ñ–∏—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            thick_border = Side(border_style="thick", color="000000")
            thin_border = Side(border_style="thin", color="000000")
            
            cell.border = Border(
                top=thick_border,
                left=thick_border if col_idx == 0 else thin_border,
                right=thick_border if col_idx == len(headers) - 1 else thin_border,
                bottom=thick_border  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∂–∏—Ä–Ω–∞—è
            )
    
    def _add_data_rows(self, ws, data: List[Dict[str, Any]]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        
        for row_idx, record in enumerate(data):
            ws_row = self.start_row + 1 + row_idx  # +1 —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            row_data = [
                record.get('account_number', ''),
                record.get('inn', ''),
                record.get('counterparty', ''),
                record.get('amount', ''),
                record.get('vat_amount', ''),
                record.get('invoice_date', ''),
                record.get('shipping_date', ''),
                record.get('payment_date', '')
            ]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏
            fill_color = self._get_row_color(record)
            
            for col_idx, value in enumerate(row_data):
                cell = ws.cell(
                    row=ws_row,
                    column=self.start_col + col_idx,
                    value=value
                )
                
                # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –≤ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if col_idx == 0 and value:  # –°—Ç–æ–ª–±–µ—Ü "–ù–æ–º–µ—Ä"
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
                        if isinstance(value, str) and '-' in value:
                            number_part = value.split('-')[0]
                            cell.value = int(number_part)
                        elif isinstance(value, str) and value.isdigit():
                            cell.value = int(value)
                    except (ValueError, AttributeError):
                        pass  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
                
                # –¶–≤–µ—Ç–æ–≤–∞—è –∑–∞–ª–∏–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏
                if fill_color:
                    cell.fill = PatternFill(start_color=fill_color, end_color=fill_color, fill_type="solid")
                
                # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Å—Ç–æ–ª–±—Ü–∞
                cell.alignment = self._get_column_alignment(col_idx)
                
                # –ß–∏—Å–ª–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                cell.number_format = self._get_column_number_format(col_idx)
                
                # –û–±—ã—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
                thin_border = Side(border_style="thin", color="000000")
                thick_border = Side(border_style="thick", color="000000")
                
                cell.border = Border(
                    top=thin_border,
                    left=thick_border if col_idx == 0 else thin_border,
                    right=thick_border if col_idx == len(row_data) - 1 else thin_border,
                    bottom=thin_border
                )
    
    def _apply_data_table_borders(self, ws, data_rows: int) -> None:
        """4. –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∂–∏—Ä–Ω—É—é —Ä–∞–º–∫—É —Ç–æ–ª—å–∫–æ –≤–æ–∫—Ä—É–≥ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–ë–ï–ó –∏—Ç–æ–≥–æ–≤)."""
        
        thick_border = Side(border_style="thick", color="000000")
        
        # –†–∞–º–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ü–û–°–õ–ï –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        last_data_row = self.start_row + data_rows  # –∑–∞–≥–æ–ª–æ–≤–∫–∏ + –¥–∞–Ω–Ω—ã–µ
        last_col = self.start_col + 7  # 8 —Å—Ç–æ–ª–±—Ü–æ–≤ = –∏–Ω–¥–µ–∫—Å 7
        
        # –ñ–∏—Ä–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–ª—å–∫–æ –≤–æ–∫—Ä—É–≥ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        for row in range(self.start_row, last_data_row + 1):
            for col in range(self.start_col, last_col + 1):
                cell = ws.cell(row=row, column=col)
                
                border_left = thick_border if col == self.start_col else cell.border.left
                border_right = thick_border if col == last_col else cell.border.right  
                border_top = thick_border if row == self.start_row else cell.border.top
                border_bottom = thick_border if row == last_data_row else cell.border.bottom
                
                cell.border = Border(
                    left=border_left,
                    right=border_right,
                    top=border_top,
                    bottom=border_bottom
                )
    
    def _add_summary_section_new_format(self, ws, data: List[Dict[str, Any]]) -> None:
        """5. –î–æ–±–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–∏ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ 04.png."""
        
        if not data:
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–∏
        total_amount = sum(record.get('amount_numeric', 0) or 0 for record in data)
        total_vat = sum(record.get('vat_amount_numeric', 0) or 0 for record in data)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—á–µ—Ç–∞ —Å –ù–î–° –∏ –±–µ–∑ –ù–î–°
        no_vat_records = [r for r in data if r.get('is_no_vat', False)]
        with_vat_records = [r for r in data if not r.get('is_no_vat', False)]
        
        no_vat_amount = sum(record.get('amount_numeric', 0) or 0 for record in no_vat_records)
        with_vat_amount = sum(record.get('amount_numeric', 0) or 0 for record in with_vat_records)
        
        # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∏—Ç–æ–≥–æ–≤ (—Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –¥–∞–Ω–Ω—ã—Ö + 2 –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
        summary_start_row = self.start_row + len(data) + 3
        
        # 5. –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Ç–æ–≥–æ–≤ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ 04.png
        summaries = [
            ("–í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É:", total_amount),
            ("–°—á–µ—Ç–æ–≤ –±–µ–∑ –ù–î–° –Ω–∞ —Å—É–º–º—É:", no_vat_amount), 
            ("–°—á–µ—Ç–æ–≤ —Å –ù–î–° –Ω–∞ —Å—É–º–º—É:", with_vat_amount),
            ("–í—Å–µ–≥–æ –ù–î–° –≤ —Å—á–µ—Ç–∞—Ö:", total_vat)
        ]
        
        for idx, (label, amount) in enumerate(summaries):
            current_row = summary_start_row + idx
            
            # –ü–æ–¥–ø–∏—Å—å –≤ —Å—Ç–æ–ª–±—Ü–µ D (–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç)
            label_cell = ws.cell(row=current_row, column=self.start_col + 2, value=label)
            label_cell.font = Font(bold=True)
            label_cell.alignment = Alignment(horizontal="left")
            
            # –°—É–º–º–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ E (–°—É–º–º–∞)
            amount_cell = ws.cell(row=current_row, column=self.start_col + 3, value=amount)
            amount_cell.font = Font(bold=True)
            amount_cell.alignment = Alignment(horizontal="right")
            amount_cell.number_format = '#,##0.00'
            
            # –í—ã–¥–µ–ª—è–µ–º –ù–î–° –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            if "–ù–î–°" in label:
                amount_cell.font = Font(bold=True, color="FF0000")  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ù–î–°
        
        self.logger.info(f"üìä –ù–æ–≤—ã–µ –∏—Ç–æ–≥–∏: {len(data)} —Å—á–µ—Ç–æ–≤, –≤—Å–µ–≥–æ: {total_amount:,.2f}, –±–µ–∑ –ù–î–°: {no_vat_amount:,.2f}, —Å –ù–î–°: {with_vat_amount:,.2f}, –ù–î–°: {total_vat:,.2f}")
    
    def _get_row_color(self, record: Dict[str, Any]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –∑–∞–ø–∏—Å–∏."""
        
        # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö
        if record.get('is_unpaid', False):
            return "FFC0CB"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö
            
        # –°–µ—Ä—ã–π –¥–ª—è –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –ù–î–°
        if record.get('is_no_vat', False):
            return "D3D3D3"  # –°–µ—Ä—ã–π –¥–ª—è "–ë–µ–∑ –ù–î–°"
            
        return None  # –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    
    def _get_column_alignment(self, col_idx: int) -> Alignment:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        
        # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: –ù–æ–º–µ—Ä(0), –ò–ù–ù(1), –î–∞—Ç–∞ —Å—á—ë—Ç–∞(5), –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏(6), –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã(7)
        center_columns = [0, 1, 5, 6, 7]
        # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è: –°—É–º–º–∞(3), –ù–î–°(4)  
        right_columns = [3, 4]
         
        if col_idx in center_columns:
            return Alignment(horizontal="center", vertical="center")
        elif col_idx in right_columns:
            return Alignment(horizontal="right", vertical="center")
        else:
            return Alignment(horizontal="left", vertical="center")  # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —Å–ª–µ–≤–∞
    
    def _get_column_number_format(self, col_idx: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞."""
        
        # 2. –ù–æ–º–µ—Ä –∫–∞–∫ —á–∏—Å–ª–æ (—Å—Ç–æ–ª–±–µ—Ü 0)
        if col_idx == 0:
            return '0'  # –¶–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        
        # –ò–ù–ù –∫–∞–∫ —á–∏—Å–ª–æ (—Å—Ç–æ–ª–±–µ—Ü 1)
        elif col_idx == 1:
            return '0'  # –¶–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            
        # –°—É–º–º—ã –∫–∞–∫ —á–∏—Å–ª–∞ (—Å—Ç–æ–ª–±—Ü—ã 3, 4)
        elif col_idx in [3, 4]:
            return '#,##0.00'  # –ß–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á –∏ 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            
        else:
            return 'General'  # –û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    
    def _parse_amount(self, amount_str: str) -> float:
        """–ü–∞—Ä—Å–∏—Ç —Å—É–º–º—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ."""
        
        if not amount_str or amount_str == '–Ω–µ—Ç':
            return 0.0
            
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
            clean_str = str(amount_str).replace(' ', '').replace(',', '.')
            return float(clean_str)
        except (ValueError, TypeError):
            return 0.0
    
    def _freeze_headers(self, ws) -> None:
        """–ó–∞–º–æ—Ä–æ–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–Ω–∏–∏."""
        
        # –ó–∞–º–æ—Ä–æ–∑–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        freeze_cell = f"{get_column_letter(self.start_col)}{self.start_row + 1}"
        ws.freeze_panes = freeze_cell
        self.logger.info(f"üßä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {freeze_cell}")
    
    def _adjust_column_widths_auto(self, ws, data: List[Dict[str, Any]]) -> None:
        """1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–æ–º –¥–ª—è "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–î–∞—Ç–∞ —Å—á—ë—Ç–∞", "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã"."""
        
        # 3. –°—Ç–æ–ª–±–µ—Ü A (–ø—É—Å—Ç–æ–π) –¥–µ–ª–∞–µ–º –æ—á–µ–Ω—å —É–∑–∫–∏–º - –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∫ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
        ws.column_dimensions[get_column_letter(1)].width = 3  # –û—á–µ–Ω—å —É–∑–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü A
        
        # –ë–∞–∑–æ–≤—ã–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        column_widths = {
            self.start_col + 0: 12,  # –ù–æ–º–µ—Ä
            self.start_col + 1: 15,  # –ò–ù–ù
            self.start_col + 2: 25,  # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç (–±–∞–∑–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞)
            self.start_col + 3: 15,  # –°—É–º–º–∞
            self.start_col + 4: 12,  # –ù–î–°
            self.start_col + 5: 14,  # –î–∞—Ç–∞ —Å—á—ë—Ç–∞ (–±–∞–∑–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞)
            self.start_col + 6: 14,  # –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏
            self.start_col + 7: 14,  # –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã (–±–∞–∑–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞)
        }
        
        # 1. –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –¥–ª—è "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–î–∞—Ç–∞ —Å—á—ë—Ç–∞", "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã"
        if data:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
            max_counterparty_len = max(len(str(record.get('counterparty', ''))) for record in data) if data else 0
            if max_counterparty_len > 25:
                column_widths[self.start_col + 2] = min(max_counterparty_len + 2, 50)  # –ú–∞–∫—Å–∏–º—É–º 50
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã (–æ–±—ã—á–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –¥–ª–∏–Ω–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            max_invoice_date_len = max(len(str(record.get('invoice_date', ''))) for record in data) if data else 0
            max_payment_date_len = max(len(str(record.get('payment_date', ''))) for record in data) if data else 0
            
            if max_invoice_date_len > 14:
                column_widths[self.start_col + 5] = min(max_invoice_date_len + 2, 20)
            if max_payment_date_len > 14:
                column_widths[self.start_col + 7] = min(max_payment_date_len + 2, 20)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—ã
        for col_num, width in column_widths.items():
            ws.column_dimensions[get_column_letter(col_num)].width = width
            
        self.logger.info(f"üìè –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤: A={3}, –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç={column_widths[self.start_col + 2]}, –î–∞—Ç—ã={column_widths[self.start_col + 5]}")


class ReportGenerationError(Exception):
    """Custom exception for report generation errors."""
    pass


class ExcelReportBuilder:
    """
    High-level builder interface for Excel reports.
    
    Provides a convenient API for creating reports with different configurations.
    """
    
    def __init__(self):
        self.generator = ExcelReportGenerator()
    
    def build_invoice_report(self, invoices: List[Dict[str, Any]], 
                           output_path: str,
                           report_title: str = "–û—Ç—á—ë—Ç –ø–æ —Å—á–µ—Ç–∞–º") -> str:
        """
        Build an invoice report.
        
        Args:
            invoices: List of invoice data
            output_path: Where to save the report
            report_title: Title for the report sheet
            
        Returns:
            Path to the generated report
        """
        try:
            return self.generator.generate_report(
                data=invoices,
                output_path=output_path,
                sheet_name=report_title
            )
        except Exception as e:
            raise ReportGenerationError(f"Failed to generate invoice report: {e}")
    
    def build_summary_report(self, invoices: List[Dict[str, Any]], 
                           output_path: str) -> Dict[str, Any]:
        """
        Build a summary report with statistics only.
        
        Args:
            invoices: List of invoice data
            output_path: Where to save the report
            
        Returns:
            Dictionary with summary statistics
        """
        try:
            # Format data
            formatted_data = self.generator.data_formatter.format_invoice_data(invoices)
            
            # Generate summary
            summary = self.generator.summary_formatter.format_summary(formatted_data)
            
            # Generate Excel file
            self.generator.generate_report(
                data=invoices,
                output_path=output_path,
                sheet_name="–°–≤–æ–¥–∫–∞"
            )
            
            return summary
            
        except Exception as e:
            raise ReportGenerationError(f"Failed to generate summary report: {e}")
    
    def validate_data_for_report(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Validate data before report generation.
        
        Args:
            data: List of data to validate
            
        Returns:
            Dictionary with validation results
        """
        results = {
            'is_valid': True,
            'total_records': len(data),
            'valid_records': 0,
            'invalid_records': 0,
            'errors': []
        }
        
        for i, record in enumerate(data):
            try:
                # Validate record
                validated = self.generator.validator.validate_invoice_data(record)
                
                # Try formatting
                formatted = self.generator.data_formatter._format_single_invoice(validated, i + 1)
                
                results['valid_records'] += 1
                
            except Exception as e:
                results['invalid_records'] += 1
                results['errors'].append(f"Record {i + 1}: {str(e)}")
                results['is_valid'] = False
        
        return results 