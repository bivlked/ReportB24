#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ Bitrix24.
–ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
"""

import requests
import openpyxl
from openpyxl.styles import PatternFill, Alignment, Border, Side
import configparser
import os
from datetime import datetime
import time


def main():
    print("üöÄ –ü—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ Bitrix24")
    print("=" * 50)
    
    try:
        # –ß–∏—Ç–∞–µ–º config.ini
        print("üìÅ –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = configparser.ConfigParser()
        config.read('config.ini', encoding='utf-8')
        
        webhook_url = config.get('BitrixAPI', 'webhookurl').rstrip('/')
        save_folder = config.get('AppSettings', 'defaultsavefolder')
        filename = config.get('AppSettings', 'defaultfilename')
        
        print(f"‚öôÔ∏è  Webhook: {webhook_url[:50]}...")
        print(f"üìÇ –ü–∞–ø–∫–∞: {save_folder}")
        print(f"üìÑ –§–∞–π–ª: {filename}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        os.makedirs(save_folder, exist_ok=True)
        save_path = os.path.join(save_folder, filename)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
        print("\nüß™ –¢–µ—Å—Ç API...")
        response = requests.get(f"{webhook_url}/profile", timeout=10)
        if response.status_code != 200:
            print(f"‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            return False
        print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º Smart Invoices
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ Smart Invoices...")
        invoices_data = []
        start = 0
        
        while len(invoices_data) < 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–µ—Ä–≤—ã–º–∏ 10 –¥–ª—è —Ç–µ—Å—Ç–∞
            print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏–∏ {start}...")
            
            response = requests.post(
                f"{webhook_url}/crm.item.list",
                json={
                    'entityTypeId': 31,
                    'start': start,
                    'limit': 10
                },
                timeout=30
            )
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                break
                
            data = response.json()
            items = data.get('result', {}).get('items', [])
            
            if not items:
                break
                
            invoices_data.extend(items)
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {len(items)} –∑–∞–ø–∏—Å–µ–π")
            
            if len(items) < 10:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                break
                
            start += 10
            time.sleep(1)  # Rate limiting
        
        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {len(invoices_data)} Smart Invoices")
        
        if not invoices_data:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –°–æ–∑–¥–∞–µ–º Excel
        print(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á—ë—Ç–∞...")
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Smart Invoices Report"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–ù–æ–º–µ—Ä", "ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—É–º–º–∞", "–ù–î–°", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–°—Ç–∞—Ç—É—Å"]
        ws.append(headers)
        
        # –°—Ç–∏–ª–∏
        header_fill = PatternFill(start_color="C4D79B", end_color="C4D79B", fill_type="solid")
        center_align = Alignment(horizontal="center")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.fill = header_fill
            cell.alignment = center_align
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for invoice in invoices_data:
            row = [
                invoice.get('accountNumber', ''),
                invoice.get('id', ''),
                invoice.get('title', ''),
                invoice.get('opportunity', 0),
                invoice.get('taxValue', 0),
                invoice.get('createdTime', ''),
                invoice.get('stageId', '')
            ]
            ws.append(row)
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        wb.save(save_path)
        
        print(f"üéâ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω!")
        print(f"üìÑ –ü—É—Ç—å: {save_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if os.path.exists(save_path):
            size = os.path.getsize(save_path)
            print(f"üì¶ –†–∞–∑–º–µ—Ä: {size:,} –±–∞–π—Ç")
            print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(invoices_data)}")
            return True
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ –ì–û–¢–û–í–û! –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
    
    print("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è...")
    input() 