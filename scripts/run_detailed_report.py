#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ Bitrix24 —Å —Ç–æ–≤–∞—Ä–∞–º–∏.

–°–æ–∑–¥–∞—ë—Ç Excel –æ—Ç—á—ë—Ç —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏:
- "–ö—Ä–∞—Ç–∫–∏–π": –û–±–∑–æ—Ä –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
- "–ü–æ–ª–Ω—ã–π": –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∑–µ–±—Ä–∞-–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
"""

import sys
import time
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ scripts/
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))
from src.core.app import AppFactory
from src.excel_generator.generator import ExcelReportGenerator
from src.excel_generator.console_ui import ConsoleUI, Colors, Spinner
from src.data_processor.data_processor import DataProcessor


def print_progress(message, step=None, total_steps=None):
    """–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –ø—Ä–æ—Å—Ç—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º."""
    timestamp = datetime.now().strftime("%H:%M:%S")
    if step and total_steps:
        progress = f"[{step}/{total_steps}]"
        print(f"{timestamp} {progress} {message}")
    else:
        print(f"{timestamp} {message}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤."""
    start_time = time.time()

    ConsoleUI.print_header("–ì–ï–ù–ï–†–ê–¢–û–† –î–ï–¢–ê–õ–¨–ù–´–• –û–¢–ß–Å–¢–û–í BITRIX24", Colors.BRIGHT_CYAN)

    try:
        # –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        ConsoleUI.print_step(1, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", "üöÄ")
        with AppFactory.create_app(config_path="config.ini") as app:

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            report_period_config = app.config_reader.get_report_period_config()
            app_config = app.config_reader.get_app_config()

            ConsoleUI.print_info(
                f"–ü–µ—Ä–∏–æ–¥: {report_period_config.start_date} - {report_period_config.end_date}",
                indent=1,
            )
            ConsoleUI.print_info(
                f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {app_config.default_filename}", indent=1
            )
            print()

            # –≠—Ç–∞–ø 2: –í–∞–ª–∏–¥–∞—Ü–∏—è
            ConsoleUI.print_step(2, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", "üîç")
            if not app.validate_configuration():
                ConsoleUI.print_error("–û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                error_report = app.get_error_report()
                print(error_report)
                return False
            ConsoleUI.print_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            print()

            # –≠—Ç–∞–ø 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            ConsoleUI.print_step(3, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24...", "üîå")
            if not app.test_api_connection():
                ConsoleUI.print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bitrix24 API")
                return False
            ConsoleUI.print_success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print()

            # –≠—Ç–∞–ø 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            ConsoleUI.print_step(4, "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Bitrix24...", "üì°")

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                bitrix_client = app.bitrix_client
                data_processor = app.data_processor
                data_processor.set_bitrix_client(bitrix_client)
                generator = ExcelReportGenerator()

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
                spinner = Spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç–æ–≤ –∏–∑ Bitrix24")
                spinner.start()

                invoices = app.workflow_orchestrator._fetch_invoices_data(
                    report_period_config.start_date, report_period_config.end_date
                )

                spinner.stop(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(invoices)}", success=True)

                if not invoices:
                    ConsoleUI.print_error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                    return False

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                ConsoleUI.print_info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—á–µ—Ç–∞–º...", indent=1)
                detailed_data = []
                total_products = 0

                for i, invoice in enumerate(invoices, 1):
                    invoice_id = invoice.get("id")
                    if not invoice_id:
                        continue

                    # –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–∫–∞–∂–¥—ã–µ 5 —Å—á–µ—Ç–æ–≤ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
                    if i % 5 == 0 or i == len(invoices):
                        progress_percent = (i / len(invoices)) * 100
                        ConsoleUI.print_progress(
                            current=i,
                            total=len(invoices),
                            prefix=f"    {Colors.CYAN}–û–±—Ä–∞–±–æ—Ç–∫–∞{Colors.RESET}",
                            suffix=f"{Colors.DIM}(—Å—á—ë—Ç {i}/{len(invoices)}){Colors.RESET}",
                        )

                    # üîß –ë–ê–ì-9 FIX: get_products_by_invoice —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Dict
                    products_result = bitrix_client.get_products_by_invoice(invoice_id)
                    products = products_result.get("products", [])
                    total_products += len(products)

                    account_number = invoice.get("accountNumber", f"–°—á–µ—Ç #{invoice_id}")
                    company_name, inn = (
                        bitrix_client.get_company_info_by_invoice(account_number)
                        if account_number
                        else ("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                    )

                    invoice_info = {
                        "account_number": account_number,
                        "company_name": (
                            company_name
                            if company_name not in ["–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "–û—à–∏–±–∫–∞"]
                            else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                        ),
                        "inn": (
                            inn if inn not in ["–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "–û—à–∏–±–∫–∞"] else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                        ),
                        "invoice_id": invoice_id,
                    }

                    invoice_products = (
                        data_processor.format_detailed_products_for_excel(
                            products, invoice_info
                        )
                    )
                    detailed_data.extend(invoice_products)

                ConsoleUI.print_success(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(detailed_data)}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—á–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                spinner = Spinner("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
                spinner.start()

                brief_data = []
                for invoice in invoices:
                    processed_invoice = data_processor.process_invoice_record(invoice)
                    if processed_invoice:
                        brief_data.append(processed_invoice)

                spinner.stop(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—á–µ—Ç–æ–≤: {len(brief_data)}", success=True)
                print()

                # –≠—Ç–∞–ø 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (v2.5.0)
                ConsoleUI.print_step(5, "–°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á—ë—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π...", "üìä")
                full_path = (
                    f"{app_config.default_save_folder}/{app_config.default_filename}"
                )

                # üÜï v2.5.0: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
                result = generator.generate_comprehensive_report(
                    brief_data,
                    detailed_data,
                    full_path,
                    return_metrics=True,  # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    verbose=True,  # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
                )

                execution_time = time.time() - start_time

                # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
                ConsoleUI.print_section_separator()
                print(f"\n{Colors.BRIGHT_CYAN}{Colors.BOLD}{'‚ïê' * 70}")
                print(f"  –ò–¢–û–ì–ò –ì–ï–ù–ï–†–ê–¶–ò–ò")
                print(f"{'‚ïê' * 70}{Colors.RESET}\n")
                print(
                    f"  {Colors.CYAN}–ü–µ—Ä–∏–æ–¥:{Colors.RESET}          {report_period_config.start_date} - {report_period_config.end_date}"
                )
                print(
                    f"  {Colors.CYAN}–°—á–µ—Ç–æ–≤:{Colors.RESET}          {len(brief_data)} (–≤–∞–ª–∏–¥–Ω—ã—Ö: {Colors.BRIGHT_GREEN}{result.quality_metrics.brief_valid}{Colors.RESET})"
                )
                print(
                    f"  {Colors.CYAN}–¢–æ–≤–∞—Ä–æ–≤:{Colors.RESET}         {len(detailed_data)} (–≤–∞–ª–∏–¥–Ω—ã—Ö: {Colors.BRIGHT_GREEN}{result.quality_metrics.detailed_valid}{Colors.RESET})"
                )

                problems_color = (
                    Colors.BRIGHT_RED
                    if result.quality_metrics.total_issues > 0
                    else Colors.BRIGHT_GREEN
                )
                print(
                    f"  {Colors.CYAN}–ü—Ä–æ–±–ª–µ–º:{Colors.RESET}         {problems_color}{result.quality_metrics.total_issues}{Colors.RESET}"
                )
                print(
                    f"  {Colors.CYAN}–í—Ä–µ–º—è:{Colors.RESET}           {execution_time:.1f} —Å–µ–∫"
                )
                print(
                    f"  {Colors.CYAN}–§–∞–π–ª:{Colors.RESET}            {Colors.WHITE}{result.output_path}{Colors.RESET}"
                )
                print(f"\n{Colors.BRIGHT_CYAN}{'‚ïê' * 70}{Colors.RESET}\n")

                return True

            except Exception as e:
                ConsoleUI.print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
                return False

    except KeyboardInterrupt:
        ConsoleUI.print_warning("–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        ConsoleUI.print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    success = main()

    if success:
        ConsoleUI.print_success("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        ConsoleUI.print_error("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")

    print(f"\n{Colors.DIM}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è...{Colors.RESET}")
    input()

    if not success:
        sys.exit(1)
