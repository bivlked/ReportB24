#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ Bitrix24 Excel
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º ShortReport.py —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º config.ini

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API –º–µ—Ç–æ–¥—ã:
- crm.item.list –¥–ª—è Smart Invoices (entityTypeId=31)
- crm.requisite.link.list –¥–ª—è —Å–≤—è–∑–µ–π —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
- crm.requisite.get –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ù–ù –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π
"""

import requests
import configparser
import time
from datetime import datetime
from pathlib import Path
import openpyxl
from openpyxl import Workbook, load_workbook
from openpyxl.styles import PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter


class EnhancedBitrix24Reporter:
    """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ Bitrix24 —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏"""
    
    def __init__(self, config_path="config.ini"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(f"‚è∞ –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {datetime.now().strftime('%Y.%m.%d %H:%M:%S')}")
        self.config = configparser.ConfigParser()
        self.config.read(config_path, encoding='utf-8')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.ini (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏)
        self.webhook_url = self.config.get('BitrixAPI', 'webhookurl')
        self.save_folder = self.config.get('AppSettings', 'defaultsavefolder', fallback='reports')
        self.file_name = self.config.get('AppSettings', 'defaultfilename', fallback='Enhanced_Report.xlsx')
        
        # –ü–µ—Ä–∏–æ–¥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –¥–ª—è 2022)
        start_date_str = self.config.get('ReportPeriod', 'startdate', fallback='01.01.2022')
        end_date_str = self.config.get('ReportPeriod', 'enddate', fallback='31.12.2022')
        
        self.start_date = datetime.strptime(start_date_str, "%d.%m.%Y").date()
        self.end_date = datetime.strptime(end_date_str, "%d.%m.%Y").date()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        Path(self.save_folder).mkdir(exist_ok=True)
        
        print(f"üîó Webhook URL: {self.webhook_url}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}")
        print(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.save_folder}")
        print(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {self.file_name}")

    def get_company_info_by_invoice(self, invoice_number):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å—á–µ—Ç–∞
        –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ ShortReport.py
        """
        try:
            # 1. –ò—â–µ–º —Å—á—ë—Ç –ø–æ –Ω–æ–º–µ—Ä—É (accountNumber)
            resp = requests.get(f"{self.webhook_url}crm.item.list", params={
                'filter[accountNumber]': invoice_number,
                'entityTypeId': 31
            })
            time.sleep(0.5)  # Rate limiting –∫–∞–∫ –≤ ShortReport.py
            data = resp.json()

            items = data.get('result', {}).get('items', [])
            if not items:
                print(f"‚ö†Ô∏è –°—á—ë—Ç ‚Ññ{invoice_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None, None

            inv_item = items[0]
            inv_id = inv_item.get('id')
            if not inv_id:
                print(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è 'id' —É —Å—á—ë—Ç–∞ ‚Ññ{invoice_number}")
                return None, None

            # 2. –ò—â–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤ crm.requisite.link
            link_resp = requests.get(f"{self.webhook_url}crm.requisite.link.list", params={
                'filter[ENTITY_TYPE_ID]': 31,
                'filter[ENTITY_ID]': inv_id
            })
            time.sleep(0.5)
            link_data = link_resp.json()
            link_items = link_data.get('result', [])
            if not link_items:
                print(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —É —Å—á—ë—Ç–∞ ID={inv_id}")
                return "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤", "–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"

            req_id = link_items[0].get('REQUISITE_ID')
            if not req_id or int(req_id) <= 0:
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π REQUISITE_ID={req_id}")
                return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç"

            # 3. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç
            req_resp = requests.post(f"{self.webhook_url}crm.requisite.get", json={"id": str(req_id)})
            time.sleep(0.5)
            req_data = req_resp.json()
            if not req_data.get('result'):
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç ID={req_id}")
                return "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞", "–û—à–∏–±–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞"

            fields = req_data['result']
            rq_inn = fields.get('RQ_INN', '')
            rq_company = fields.get('RQ_COMPANY_NAME', '')
            rq_name = fields.get('RQ_NAME', '')

            # 4. –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ –ò–ù–ù (–∫–∞–∫ –≤ ShortReport.py)
            if rq_inn.isdigit():
                if len(rq_inn) == 10:
                    return rq_company, rq_inn  # –û–û–û/–ó–ê–û
                elif len(rq_inn) == 12:
                    return (f"–ò–ü {rq_name}" if rq_name else "–ò–ü (–Ω–µ—Ç –∏–º–µ–Ω–∏)", rq_inn)  # –ò–ü
                else:
                    return rq_company, rq_inn
            else:
                return rq_company, rq_inn

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —Å—á—ë—Ç–∞ {invoice_number}: {e}")
            return "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"

    def get_all_smart_invoices(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö Smart Invoices —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ –æ—Ç–≥—Ä—É–∑–∫–∏
        –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ ShortReport.py
        """
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ Smart Invoices –∑–∞ –ø–µ—Ä–∏–æ–¥ {self.start_date} - {self.end_date}")
        url = f"{self.webhook_url}crm.item.list"
        all_invoices = []
        start = 0
        page = 1

        while True:
            print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}...")
            params = {
                'entityTypeId': 31,
                'start': start,
                'filter': {
                    '!stageId': 'DT31_1:D'  # –∏—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ
                },
                'select': [
                    'id',
                    'accountNumber',
                    'statusId',
                    'dateBill',
                    'price',
                    'UFCRM_SMART_INVOICE_1651168135187',  # –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏
                    'UFCRM_626D6ABE98692',               # –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                    'begindate',
                    'opportunity',
                    'stageId',
                    'taxValue'
                ]
            }
            
            resp = requests.post(url, json=params)
            time.sleep(0.5)  # Rate limiting
            
            if resp.status_code == 200:
                data = resp.json()
                if 'result' in data and 'items' in data['result']:
                    page_items = data['result']['items']
                    all_invoices.extend(page_items)
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(page_items)} –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                    
                    if 'next' in data:
                        start = data['next']
                        page += 1
                    else:
                        break
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API")
                    break
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {resp.status_code} - {resp.text}")
                break

        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_invoices)}")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –æ—Ç–≥—Ä—É–∑–∫–∏ (–∫–∞–∫ –≤ ShortReport.py)
        filtered = []
        for inv in all_invoices:
            ship_date_str = inv.get('UFCRM_SMART_INVOICE_1651168135187')
            if ship_date_str:
                try:
                    d = datetime.fromisoformat(ship_date_str.replace('Z', '+00:00')).date()
                    if self.start_date <= d <= self.end_date:
                        filtered.append(inv)
                except ValueError as ex:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞—Ç—ã –æ—Ç–≥—Ä—É–∑–∫–∏ (ID={inv['id']}): {ex}")

        print(f"üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç–µ –æ—Ç–≥—Ä—É–∑–∫–∏: {len(filtered)} –∑–∞–ø–∏—Å–µ–π")
        return filtered

    def format_date(self, date_str):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã (–∫–∞–∫ –≤ ShortReport.py)"""
        if not date_str:
            return ""
        try:
            d = datetime.fromisoformat(date_str.replace('Z', '+00:00')).date()
            return d.strftime("%d.%m.%Y")
        except:
            return ""

    def format_currency(self, amount):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–∫–∞–∫ –≤ ShortReport.py)"""
        try:
            return f"{float(amount):,.2f}".replace(',', ' ').replace('.', ',')
        except:
            return "0,00"

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        invoices = self.get_all_smart_invoices()
        if not invoices:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return False

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        ws = wb.active
        ws.title = "–°—á–µ—Ç–∞ (Smart Invoices)"

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ ShortReport.py
        headers = ["–ù–æ–º–µ—Ä", "–ò–ù–ù", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–°—É–º–º–∞", "–ù–î–°", "–î–∞—Ç–∞ —Å—á—ë—Ç–∞", "–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏", "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã"]
        ws.append(headers)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ (–∫–∞–∫ –≤ ShortReport.py)
        white_fill = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")
        grey_fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")
        red_fill = PatternFill(start_color="FFC0CB", end_color="FFC0CB", fill_type="solid")
        header_fill = PatternFill(start_color="C4D79B", end_color="C4D79B", fill_type="solid")

        print(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(invoices)} –∑–∞–ø–∏—Å–µ–π...")
        row_index = 2
        
        for i, inv in enumerate(invoices, 1):
            if i % 10 == 0:
                print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(invoices)} –∑–∞–ø–∏—Å–µ–π...")
                
            acc_num = inv.get('accountNumber', '')
            sum_val = self.format_currency(inv.get('opportunity', 0))
            tax_val = float(inv.get('taxValue', 0))
            tax_text = self.format_currency(tax_val) if tax_val != 0 else "–Ω–µ—Ç"

            date_bill = self.format_date(inv.get('begindate'))
            ship_date = self.format_date(inv.get('UFCRM_SMART_INVOICE_1651168135187'))
            pay_date_str = inv.get('UFCRM_626D6ABE98692')
            pay_date = self.format_date(pay_date_str) if pay_date_str else ""

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (—Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å!)
            comp_name, inn = self.get_company_info_by_invoice(acc_num)
            if not comp_name and not inn:
                comp_name, inn = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

            row_data = [acc_num, inn, comp_name, sum_val, tax_text, date_bill, ship_date, pay_date]
            ws.append(row_data)

            # –¶–≤–µ—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–∫–∞–∫ –≤ ShortReport.py)
            if pay_date == "":
                fill_color = red_fill  # –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
            elif tax_text == "–Ω–µ—Ç":
                fill_color = grey_fill  # –±–µ–∑ –ù–î–°
            else:
                fill_color = white_fill  # –æ–±—ã—á–Ω—ã–µ

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
            for col_idx in range(1, len(headers) + 1):
                cell = ws.cell(row=row_index, column=col_idx)
                cell.fill = fill_color

            row_index += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_path = Path(self.save_folder) / "temp_report.xlsx"
        wb.save(temp_path)

        # –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∫ –≤ ShortReport.py)
        print("üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        wb2 = load_workbook(temp_path)
        ws2 = wb2.active

        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in ws2.columns:
            max_length = 0
            col_letter = get_column_letter(col[0].column)
            for cell in col:
                val = cell.value
                if val is not None:
                    length = len(str(val))
                    if length > max_length:
                        max_length = length
            ws2.column_dimensions[col_letter].width = max_length + 2

        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        center_alignment = Alignment(horizontal="center")
        left_alignment = Alignment(horizontal="left")
        right_alignment = Alignment(horizontal="right")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞) - –∑–µ–ª–µ–Ω—ã–π –∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        for cell in ws2["1:1"]:
            cell.alignment = center_alignment
            cell.fill = header_fill

        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ (–∫–∞–∫ –≤ ShortReport.py)
        for cell in ws2["B:B"]:  # –ò–ù–ù - —Ü–µ–Ω—Ç—Ä
            cell.alignment = center_alignment
        for cell in ws2["E:E"]:  # –ù–î–° - —Ü–µ–Ω—Ç—Ä
            cell.alignment = center_alignment
        for cell in ws2["F:F"]:  # –î–∞—Ç–∞ —Å—á—ë—Ç–∞ - –≤–ø—Ä–∞–≤–æ
            cell.alignment = right_alignment
        for cell in ws2["G:G"]:  # –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ - –≤–ø—Ä–∞–≤–æ
            cell.alignment = right_alignment
        for cell in ws2["H:H"]:  # –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã - –≤–ø—Ä–∞–≤–æ
            cell.alignment = right_alignment
        for cell in ws2["D:D"]:  # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç - –≤–ª–µ–≤–æ (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ)
            if cell.row > 1:
                cell.alignment = left_alignment

        # –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
        thin = Side(style='thin')
        thin_border = Border(left=thin, right=thin, top=thin, bottom=thin)
        
        for row in ws2.iter_rows():
            for cell in row:
                cell.border = thin_border

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
        final_path = Path(self.save_folder) / self.file_name
        wb2.save(final_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_path.unlink()
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {final_path}")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(invoices)}")
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("=" * 50)
    print("üéØ –ì–ï–ù–ï–†–ê–¢–û–† –û–¢–ß–ï–¢–û–í BITRIX24 (ENHANCED)")
    print("=" * 50)
    
    try:
        reporter = EnhancedBitrix24Reporter()
        success = reporter.generate_report()
        
        if success:
            print("\nüéâ –û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
        else:
            print("\n‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –û–¢–ß–ï–¢–ê")
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    main() 