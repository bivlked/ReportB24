#!/usr/bin/env python3
"""
Proof of Concept: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API crm.item.productrow.list –¥–ª—è Smart Invoices

–¶–µ–ª—å: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Bitrix24 API
–í—Ä–µ–º—è: 2025-07-03 16:25:00
"""

import requests
import json
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from config.config_reader import SecureConfigReader
from bitrix24_client.client import Bitrix24Client


def test_crm_item_productrow_list():
    """
    –¢–µ—Å—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ Smart Invoices
    
    –°–æ–≥–ª–∞—Å–Ω–æ Context7 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: crm_item_product_row
    - –ü–æ–ª—è: ownerId, ownerType, productId, productName, price, quantity, etc.
    - –§–∏–ª—å—Ç—Ä: –ø–æ ownerId (ID —Å—á–µ—Ç–∞) –∏ ownerType (—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞)
    """
    
    print("üß™ PROOF OF CONCEPT: crm.item.productrow.list API")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config = SecureConfigReader()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.get_safe_config_info()}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bitrix24 –∫–ª–∏–µ–Ω—Ç–∞
    try:
        # –ü–æ–ª—É—á–∞–µ–º webhook URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        bitrix_config = config.get_bitrix_config()
        client = Bitrix24Client(bitrix_config.webhook_url)
        print(f"‚úÖ Bitrix24 –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {client.get_stats()['webhook_url']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Smart Invoices –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ Smart Invoices –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    try:
        invoices = client.get_smart_invoices(
            entity_type_id=31,
            filters={},
            select=['id', 'title', 'opportunity']
        )
        
        if not invoices or len(invoices) == 0:
            print("‚ùå –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(invoices)} —Å—á–µ—Ç–æ–≤")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—á–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_invoices = invoices[:3]
        for i, invoice in enumerate(test_invoices):
            print(f"   {i+1}. ID: {invoice.get('id')}, "
                  f"–ù–∞–∑–≤–∞–Ω–∏–µ: {invoice.get('title', 'N/A')[:50]}, "
                  f"–°—É–º–º–∞: {invoice.get('opportunity', 'N/A')}")
                  
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤: {e}")
        return False
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—á–µ—Ç–æ–≤
    print("\nüõí –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API crm.item.productrow.list")
    
    for i, invoice in enumerate(test_invoices):
        invoice_id = invoice.get('id')
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ {i+1}: ID {invoice_id} ---")
        
        try:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ Report BIG.py
            params = {
                'filter': {
                    '=ownerType': 'SI',  # SI = Smart Invoice (–∏–∑ Report BIG.py)
                    '=ownerId': invoice_id
                }
            }
            
            print(f"   üì° –ó–∞–ø—Ä–æ—Å: crm.item.productrow.list")
            print(f"   üîç –§–∏–ª—å—Ç—Ä: =ownerId={invoice_id}, =ownerType=SI")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = client._make_request('POST', 'crm.item.productrow.list', data=params)
            
            if response and response.success:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ Report BIG.py: result.productRows
                products = response.data.get('productRows', []) if isinstance(response.data, dict) else []
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                
                if products:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ç–æ–≤–∞—Ä–∞
                    for j, product in enumerate(products[:2]):
                        print(f"      {j+1}. {product.get('productName', 'N/A')[:30]} | "
                              f"–¶–µ–Ω–∞: {product.get('price', 'N/A')} | "
                              f"–ö–æ–ª-–≤–æ: {product.get('quantity', 'N/A')}")
                    break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
                else:
                    print("   ‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ —Å—á–µ—Ç –ø—É—Å—Ç)")
                    
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API: {response.error if response else 'None'}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            
            # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ Report BIG.py
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º batch –∑–∞–ø—Ä–æ—Å
    print("\nüîÄ –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch –∑–∞–ø—Ä–æ—Å–∞")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º batch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å—á–µ—Ç–∞–º
        batch_data = {}
        for i, invoice in enumerate(test_invoices):
            batch_data[f'products_invoice_{i}'] = {
                'method': 'crm.item.productrow.list',
                'params': {
                    'filter': {
                        '=ownerId': invoice.get('id'),
                        '=ownerType': 'SI'
                    }
                }
            }
        
        print(f"   üì¶ Batch –∑–∞–ø—Ä–æ—Å –¥–ª—è {len(batch_data)} —Å—á–µ—Ç–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∑–∞–ø—Ä–æ—Å
        batch_response = client._make_request('POST', 'batch', data={'cmd': batch_data})
        
        if batch_response and batch_response.success:
            batch_results = batch_response.data.get('result', {}) if isinstance(batch_response.data, dict) else {}
            print(f"   ‚úÖ Batch —É—Å–ø–µ—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(batch_results)} –æ—Ç–≤–µ—Ç–æ–≤")
            
            total_products = 0
            for key, result in batch_results.items():
                if isinstance(result, list):
                    total_products += len(result)
                    print(f"   - {key}: {len(result)} —Ç–æ–≤–∞—Ä–æ–≤")
                elif isinstance(result, dict) and 'items' in result:
                    total_products += len(result['items'])
                    print(f"   - {key}: {len(result['items'])} —Ç–æ–≤–∞—Ä–æ–≤")
                    
            print(f"   üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ batch: {total_products}")
            
        else:
            print(f"   ‚ùå Batch –Ω–µ—É—Å–ø–µ—à–µ–Ω: {batch_response.error if batch_response else 'None'}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ batch –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ PROOF OF CONCEPT:")
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("‚úÖ Smart Invoices –ø–æ–ª—É—á–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ") 
    print("üîç API crm.item.productrow.list –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
    print("üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –§–∞–∑–µ 1: API —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ")
    
    return True


if __name__ == "__main__":
    success = test_crm_item_productrow_list()
    sys.exit(0 if success else 1) 