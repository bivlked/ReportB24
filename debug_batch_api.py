#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ batch API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.core.app import AppFactory

def debug_batch_api():
    """–û—Ç–ª–∞–¥–∫–∞ batch API –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.DEBUG)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ AppFactory
        app = AppFactory.create_app()
        
        print("üîç –û—Ç–ª–∞–¥–∫–∞ batch API –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—á–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤...")
        invoices = app.workflow_orchestrator._fetch_invoices_data(
            start_date="01.05.2025",
            end_date="31.05.2025"
        )
        
        if not invoices:
            print("‚ùå –ù–µ—Ç —Å—á–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—á–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_invoices = invoices[:3]
        invoice_ids = [inv.get('id') for inv in test_invoices if inv.get('id')]
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(invoice_ids)} —Å—á–µ—Ç–æ–≤: {invoice_ids}")
        
        # –¢–µ—Å—Ç 1: –û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        print("\n=== –¢–ï–°–¢ 1: –û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ===")
        for invoice_id in invoice_ids:
            products = app.bitrix_client.get_products_by_invoice(invoice_id)
            print(f"–°—á–µ—Ç {invoice_id}: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            if products:
                print(f"  –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {products[0].get('productName', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –¢–µ—Å—Ç 2: Batch –∑–∞–ø—Ä–æ—Å
        print("\n=== –¢–ï–°–¢ 2: Batch –∑–∞–ø—Ä–æ—Å ===")
        batch_products = app.bitrix_client.get_products_by_invoices_batch(invoice_ids, chunk_size=3)
        
        print(f"Batch —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(batch_products)} —Å—á–µ—Ç–æ–≤")
        for invoice_id, products in batch_products.items():
            print(f"–°—á–µ—Ç {invoice_id}: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            if products:
                print(f"  –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {products[0].get('productName', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n=== –°–†–ê–í–ù–ï–ù–ò–ï ===")
        for invoice_id in invoice_ids:
            single_count = len(app.bitrix_client.get_products_by_invoice(invoice_id))
            batch_count = len(batch_products.get(invoice_id, []))
            
            status = "‚úÖ" if single_count == batch_count else "‚ùå"
            print(f"{status} –°—á–µ—Ç {invoice_id}: –æ–¥–∏–Ω–æ—á–Ω—ã–π={single_count}, batch={batch_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if 'app' in locals():
            app.close()

if __name__ == "__main__":
    debug_batch_api() 