#!/usr/bin/env python3
"""
API Data Cache –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Bitrix24
Phase 2.1 of detailed-report-enhancements-2025-07-25

–¶–µ–ª—å: Request Deduplication Cache –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ invoice_id
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö
- Short-Term Memory Cache (—Å–µ—Å—Å–∏–æ–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
"""

import logging
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
import threading
import hashlib
import json

logger = logging.getLogger(__name__)


@dataclass
class CacheEntry:
    """–ó–∞–ø–∏—Å—å –≤ –∫—ç—à–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""

    data: Any
    created_at: datetime
    access_count: int = 0
    last_accessed: Optional[datetime] = None

    def __post_init__(self):
        if self.last_accessed is None:
            self.last_accessed = self.created_at


class APIDataCache:
    """
    –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö API –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Bitrix24

    –†–µ–∞–ª–∏–∑—É–µ—Ç:
    - Request Deduplication: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    - Short-Term Memory Cache: –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
    - Automatic Cleanup: –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """

    def __init__(self, default_ttl_minutes: int = 15):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞

        Args:
            default_ttl_minutes: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        self.default_ttl = timedelta(minutes=default_ttl_minutes)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—ç—à–∏
        self._product_cache: Dict[str, CacheEntry] = {}
        self._company_cache: Dict[str, CacheEntry] = {}
        self._invoice_cache: Dict[str, CacheEntry] = {}
        # –û–±—â–∏–π –∫—ç—à –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._general_cache: Dict[str, CacheEntry] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._hits = 0
        self._misses = 0
        self._cache_created = datetime.now()

        # Thread safety
        self._lock = threading.RLock()

        logger.info(f"APIDataCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, TTL: {default_ttl_minutes} –º–∏–Ω")

    def get_products_cached(self, invoice_id: str) -> Optional[List[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—á–µ—Ç–∞

        Args:
            invoice_id: ID —Å—á–µ—Ç–∞

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
        """
        cache_key = f"products_{invoice_id}"

        with self._lock:
            entry = self._product_cache.get(cache_key)

            if entry and self._is_valid(entry):
                # Cache HIT
                entry.access_count += 1
                entry.last_accessed = datetime.now()
                self._hits += 1

                logger.debug(
                    f"Cache HIT: –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å—á–µ—Ç–∞ {invoice_id} "
                    f"(–æ–±—Ä–∞—â–µ–Ω–∏–π: {entry.access_count})"
                )
                return entry.data

            # Cache MISS
            self._misses += 1
            logger.debug(f"Cache MISS: –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å—á–µ—Ç–∞ {invoice_id}")
            return None

    def set_products_cached(
        self, invoice_id: str, products: List[Dict[str, Any]]
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫—ç—à

        Args:
            invoice_id: ID —Å—á–µ—Ç–∞
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Note:
            üî• –ë–ê–ì-3 FIX: –¢–µ–ø–µ—Ä—å –∫—ç—à–∏—Ä—É–µ—Ç –ü–£–°–¢–´–ï —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.
            –≠—Ç–æ –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—á–µ—Ç–æ–≤ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤.
        """
        cache_key = f"products_{invoice_id}"

        with self._lock:
            entry = CacheEntry(data=products, created_at=datetime.now())
            self._product_cache[cache_key] = entry

            if not products:
                logger.info(
                    f"‚úÖ –ë–ê–ì-3: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ 0 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—á–µ—Ç–∞ {invoice_id} (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)"
                )
            else:
                logger.debug(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—á–µ—Ç–∞ {invoice_id}")

    def get_company_cached(self, invoice_number: str) -> Optional[Tuple[str, str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏

        Args:
            invoice_number: –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞

        Returns:
            Tuple[str, str]: (company_name, inn) –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
        """
        cache_key = f"company_{invoice_number}"

        with self._lock:
            entry = self._company_cache.get(cache_key)

            if entry and self._is_valid(entry):
                # Cache HIT
                entry.access_count += 1
                entry.last_accessed = datetime.now()
                self._hits += 1

                logger.debug(f"Cache HIT: –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è —Å—á–µ—Ç–∞ {invoice_number}")
                return entry.data

            # Cache MISS
            self._misses += 1
            logger.debug(f"Cache MISS: –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è —Å—á–µ—Ç–∞ {invoice_number}")
            return None

    def set_company_cached(
        self, invoice_number: str, company_name: str, inn: str
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∫—ç—à

        Args:
            invoice_number: –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞
            company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            inn: –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏
        """
        cache_key = f"company_{invoice_number}"

        with self._lock:
            entry = CacheEntry(data=(company_name, inn), created_at=datetime.now())
            self._company_cache[cache_key] = entry

            logger.debug(
                f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è {company_name} –¥–ª—è —Å—á–µ—Ç–∞ {invoice_number}"
            )

    def get_company_details_cached(self, company_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏

        üî• –ù–û–í–û–ï (v2.1.2): –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ company_id
        –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—á–µ—Ç–æ–≤

        Args:
            company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ Bitrix24

        Returns:
            Dict —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ

        Thread-safe: –î–∞
        """
        cache_key = f"company_details_{company_id}"

        with self._lock:
            entry = self._company_cache.get(cache_key)

            if entry and self._is_valid(entry):
                # Cache HIT
                entry.access_count += 1
                entry.last_accessed = datetime.now()
                self._hits += 1

                logger.debug(
                    f"Cache HIT: —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ {company_id} "
                    f"(–æ–±—Ä–∞—â–µ–Ω–∏–π: {entry.access_count})"
                )
                return entry.data

            # Cache MISS
            self._misses += 1
            logger.debug(f"Cache MISS: —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")
            return None

    def cache_company_details(
        self, company_id: str, company_data: Dict[str, Any]
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∫—ç—à

        üî• –ù–û–í–û–ï (v2.1.2): –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è
        –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ crm.company.get

        Args:
            company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏
            company_data: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤–∫–ª—é—á–∞—è —Ä–µ–∫–≤–∏–∑–∏—Ç—ã

        Thread-safe: –î–∞
        """
        cache_key = f"company_details_{company_id}"

        with self._lock:
            entry = CacheEntry(data=company_data, created_at=datetime.now())
            self._company_cache[cache_key] = entry

            logger.debug(
                f"Cache PUT: —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ {company_id} "
                f"—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (TTL: {self.default_ttl})"
            )

    def get_invoice_cached(self, invoice_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ

        Args:
            invoice_id: ID —Å—á–µ—Ç–∞

        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
        """
        cache_key = f"invoice_{invoice_id}"

        with self._lock:
            entry = self._invoice_cache.get(cache_key)

            if entry and self._is_valid(entry):
                entry.access_count += 1
                entry.last_accessed = datetime.now()
                self._hits += 1

                logger.debug(f"Cache HIT: —Å—á–µ—Ç {invoice_id}")
                return entry.data

            self._misses += 1
            logger.debug(f"Cache MISS: —Å—á–µ—Ç {invoice_id}")
            return None

    def set_invoice_cached(self, invoice_id: str, invoice_data: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞ –≤ –∫—ç—à

        Args:
            invoice_id: ID —Å—á–µ—Ç–∞
            invoice_data: –î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
        """
        cache_key = f"invoice_{invoice_id}"

        with self._lock:
            entry = CacheEntry(data=invoice_data, created_at=datetime.now())
            self._invoice_cache[cache_key] = entry

            logger.debug(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω —Å—á–µ—Ç {invoice_id}")

    def get(self, method: str, params: Dict[str, Any]) -> Optional[Any]:
        """
        –û–±—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞

        Args:
            method: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ API
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            Any: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
        """
        cache_key = self._generate_cache_key(method, params)

        with self._lock:
            entry = self._general_cache.get(cache_key)

            if entry and self._is_valid(entry):
                # Cache HIT
                entry.access_count += 1
                entry.last_accessed = datetime.now()
                self._hits += 1

                logger.debug(f"Cache HIT: {method} (–∫–ª—é—á: {cache_key[:16]}...)")
                return entry.data

            # Cache MISS
            self._misses += 1
            logger.debug(f"Cache MISS: {method} (–∫–ª—é—á: {cache_key[:16]}...)")
            return None

    def put(self, method: str, params: Dict[str, Any], data: Any) -> None:
        """
        –û–±—â–∏–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à

        Args:
            method: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ API
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if data is None:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è None –¥–ª—è –º–µ—Ç–æ–¥–∞ {method}")
            return

        cache_key = self._generate_cache_key(method, params)

        with self._lock:
            entry = CacheEntry(data=data, created_at=datetime.now())
            self._general_cache[cache_key] = entry

            logger.debug(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {method} (–∫–ª—é—á: {cache_key[:16]}...)")

    def _generate_cache_key(self, method: str, params: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

        Args:
            method: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã

        Returns:
            str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞
        """
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ JSON —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∫–ª—é—á–µ–π –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        params_str = json.dumps(params, sort_keys=True, ensure_ascii=False)
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        cache_data = f"{method}:{params_str}"
        return hashlib.md5(cache_data.encode("utf-8")).hexdigest()

    def _is_valid(self, entry: CacheEntry) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞

        Args:
            entry: –ó–∞–ø–∏—Å—å –∫—ç—à–∞

        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        """
        age = datetime.now() - entry.created_at
        return age <= self.default_ttl

    def cleanup_expired(self) -> int:
        """
        –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        removed_count = 0
        current_time = datetime.now()

        with self._lock:
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤
            expired_products = [
                key
                for key, entry in self._product_cache.items()
                if (current_time - entry.created_at) > self.default_ttl
            ]
            for key in expired_products:
                del self._product_cache[key]
                removed_count += 1

            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ–º–ø–∞–Ω–∏–π
            expired_companies = [
                key
                for key, entry in self._company_cache.items()
                if (current_time - entry.created_at) > self.default_ttl
            ]
            for key in expired_companies:
                del self._company_cache[key]
                removed_count += 1

            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å—á–µ—Ç–æ–≤
            expired_invoices = [
                key
                for key, entry in self._invoice_cache.items()
                if (current_time - entry.created_at) > self.default_ttl
            ]
            for key in expired_invoices:
                del self._invoice_cache[key]
                removed_count += 1

            # –û—á–∏—Å—Ç–∫–∞ –æ–±—â–µ–≥–æ –∫—ç—à–∞
            expired_general = [
                key
                for key, entry in self._general_cache.items()
                if (current_time - entry.created_at) > self.default_ttl
            ]
            for key in expired_general:
                del self._general_cache[key]
                removed_count += 1

        if removed_count > 0:
            logger.info(f"–û—á–∏—â–µ–Ω–æ {removed_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞")

        return removed_count

    def clear_all(self) -> None:
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
        with self._lock:
            total_entries = (
                len(self._product_cache)
                + len(self._company_cache)
                + len(self._invoice_cache)
                + len(self._general_cache)
            )

            self._product_cache.clear()
            self._company_cache.clear()
            self._invoice_cache.clear()
            self._general_cache.clear()

            logger.info(f"–ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω, —É–¥–∞–ª–µ–Ω–æ {total_entries} –∑–∞–ø–∏—Å–µ–π")

    def get_cache_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞

        üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï (v2.1.2): –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥—Å—á–µ—Ç company_details –∑–∞–ø–∏—Å–µ–π

        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
        """
        with self._lock:
            total_requests = self._hits + self._misses
            hit_rate = (self._hits / total_requests * 100) if total_requests > 0 else 0

            uptime = datetime.now() - self._cache_created

            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫—ç—à–∞
            company_details_count = sum(
                1
                for key in self._company_cache.keys()
                if key.startswith("company_details_")
            )
            companies_basic_count = sum(
                1
                for key in self._company_cache.keys()
                if key.startswith("company_") and not key.startswith("company_details_")
            )

            return {
                "hit_rate_percent": round(hit_rate, 2),
                "total_hits": self._hits,
                "total_misses": self._misses,
                "total_requests": total_requests,
                "uptime_minutes": round(uptime.total_seconds() / 60, 1),
                "cache_sizes": {
                    "products": len(self._product_cache),
                    "companies_basic": companies_basic_count,  # üî• –ù–û–í–û–ï: —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
                    "companies_details": company_details_count,  # üî• –ù–û–í–û–ï: –ø–æ–ª–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                    "invoices": len(self._invoice_cache),
                    "general": len(self._general_cache),
                },
                "memory_efficiency": self._calculate_efficiency(),
            }

    def _calculate_efficiency(self) -> str:
        """
        –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∞

        Returns:
            str: –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        # –í—ã—á–∏—Å–ª—è–µ–º hit_rate –Ω–∞–ø—Ä—è–º—É—é, –∏–∑–±–µ–≥–∞—è —Ä–µ–∫—É—Ä—Å–∏–∏ —Å get_cache_stats()
        total_requests = self._hits + self._misses
        hit_rate = (self._hits / total_requests * 100) if total_requests > 0 else 0

        if hit_rate >= 80:
            return "–û—Ç–ª–∏—á–Ω–∞—è"
        elif hit_rate >= 60:
            return "–•–æ—Ä–æ—à–∞—è"
        elif hit_rate >= 40:
            return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è"
        else:
            return "–¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"

    def print_cache_report(self) -> None:
        """–í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞"""
        stats = self.get_cache_stats()

        print("\n" + "=" * 50)
        print("üìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò API CACHE")
        print("=" * 50)
        print(f"üéØ Hit Rate: {stats['hit_rate_percent']}%")
        print(f"‚úÖ –ü–æ–ø–∞–¥–∞–Ω–∏–π: {stats['total_hits']}")
        print(f"‚ùå –ü—Ä–æ–º–∞—Ö–æ–≤: {stats['total_misses']}")
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime_minutes']} –º–∏–Ω")
        print(f"üß† –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['memory_efficiency']}")

        print("\nüì¶ –†–ê–ó–ú–ï–†–´ –ö–≠–®–ï–ô:")
        for cache_type, size in stats["cache_sizes"].items():
            print(f"  ‚Ä¢ {cache_type}: {size} –∑–∞–ø–∏—Å–µ–π")

        print("=" * 50)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
_global_cache: Optional[APIDataCache] = None


def get_api_cache() -> APIDataCache:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫—ç—à–∞

    Returns:
        APIDataCache: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
    """
    global _global_cache
    if _global_cache is None:
        _global_cache = APIDataCache()
    return _global_cache


def clear_global_cache() -> None:
    """–û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞"""
    global _global_cache
    if _global_cache:
        _global_cache.clear_all()
        _global_cache = None


# Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
get_cache = get_api_cache
