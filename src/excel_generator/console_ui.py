"""
–ú–æ–¥—É–ª—å —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UI.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.
"""

import sys
import time
import threading
from typing import Optional


class Spinner:
    """–ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏–Ω–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""

    def __init__(self, message: str = "–ó–∞–≥—Ä—É–∑–∫–∞", color: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–∞.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            color: –¶–≤–µ—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        """
        self.message = message
        self.color = color or Colors.CYAN
        self.spinning = False
        self.thread = None
        self.frames = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
        self.current_frame = 0

    def _spin(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–∞."""
        while self.spinning:
            frame = self.frames[self.current_frame % len(self.frames)]
            sys.stdout.write(f"\r{self.color}{frame}{Colors.RESET} {self.message}...")
            sys.stdout.flush()
            self.current_frame += 1
            time.sleep(0.1)

    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä."""
        self.spinning = True
        self.thread = threading.Thread(target=self._spin, daemon=True)
        self.thread.start()

    def stop(self, final_message: str = None, success: bool = True):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä.

        Args:
            final_message: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            success: –£—Å–ø–µ—à–Ω–æ–µ –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        """
        self.spinning = False
        if self.thread:
            self.thread.join()

        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
        sys.stdout.write("\r" + " " * (len(self.message) + 20) + "\r")
        sys.stdout.flush()

        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
        if final_message:
            if success:
                print(f"{Colors.BRIGHT_GREEN}‚úÖ{Colors.RESET} {final_message}")
            else:
                print(f"{Colors.BRIGHT_RED}‚ùå{Colors.RESET} {final_message}")


class Colors:
    """ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏."""

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    RESET = "\033[0m"
    BOLD = "\033[1m"
    DIM = "\033[2m"

    # –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    WHITE = "\033[37m"

    # –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
    BRIGHT_RED = "\033[91m"
    BRIGHT_GREEN = "\033[92m"
    BRIGHT_YELLOW = "\033[93m"
    BRIGHT_BLUE = "\033[94m"
    BRIGHT_MAGENTA = "\033[95m"
    BRIGHT_CYAN = "\033[96m"

    # –§–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    BG_RED = "\033[41m"
    BG_GREEN = "\033[42m"
    BG_YELLOW = "\033[43m"
    BG_BLUE = "\033[44m"


class ConsoleUI:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å."""

    @staticmethod
    def print_header(text: str, color: str = Colors.BRIGHT_CYAN):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞."""
        line = "‚ïê" * 60
        print(f"\n{color}{Colors.BOLD}{line}")
        print(f"  {text}")
        print(f"{line}{Colors.RESET}\n")

    @staticmethod
    def print_step(step_num: int, text: str, status: str = "‚è≥"):
        """–ü–µ—á–∞—Ç—å —à–∞–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
        print(
            f"{Colors.BRIGHT_BLUE}{Colors.BOLD}[{step_num}]{Colors.RESET} {status} {text}"
        )

    @staticmethod
    def print_success(text: str):
        """–ü–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ."""
        print(f"{Colors.BRIGHT_GREEN}‚úÖ {text}{Colors.RESET}")

    @staticmethod
    def print_warning(text: str):
        """–ü–µ—á–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è."""
        print(f"{Colors.BRIGHT_YELLOW}‚ö†Ô∏è  {text}{Colors.RESET}")

    @staticmethod
    def print_error(text: str):
        """–ü–µ—á–∞—Ç—å –æ—à–∏–±–∫–∏."""
        print(f"{Colors.BRIGHT_RED}‚ùå {text}{Colors.RESET}")

    @staticmethod
    def print_info(text: str, indent: int = 0):
        """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        spaces = "  " * indent
        print(f"{spaces}{Colors.CYAN}‚ÑπÔ∏è  {text}{Colors.RESET}")

    @staticmethod
    def print_progress(
        current: int,
        total: int,
        prefix: str = "",
        suffix: str = "",
        bar_length: int = 40,
    ):
        """
        –ü–µ—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞.

        Args:
            current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            total: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –ø–µ—Ä–µ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            suffix: –°—É—Ñ—Ñ–∏–∫—Å –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            bar_length: –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        """
        if total == 0:
            return

        percent = int((current / total) * 100)
        filled_length = int(bar_length * current // total)
        bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)

        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if percent < 50:
            color = Colors.RED
        elif percent < 80:
            color = Colors.YELLOW
        else:
            color = Colors.GREEN

        sys.stdout.write(f"\r{prefix} {color}|{bar}|{Colors.RESET} {percent}% {suffix}")
        sys.stdout.flush()

        if current == total:
            print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ

    @staticmethod
    def print_stats_box(
        title: str,
        stats: dict,
        success_threshold: float = 90.0,
        warning_threshold: float = 70.0,
    ):
        """
        –ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–º–∫–µ.

        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            success_threshold: –ü–æ—Ä–æ–≥ —É—Å–ø–µ—Ö–∞ (%)
            warning_threshold: –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (%)
        """
        box_width = 60
        print(f"\n{Colors.BRIGHT_CYAN}{Colors.BOLD}‚ïî{'‚ïê' * box_width}‚ïó")
        print(f"‚ïë {title:^{box_width-2}} ‚ïë")
        print(f"‚ï†{'‚ïê' * box_width}‚ï£{Colors.RESET}")

        for key, value in stats.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
            color = Colors.RESET
            icon = "‚Ä¢"

            if isinstance(value, (int, float)):
                if value >= success_threshold:
                    color = Colors.BRIGHT_GREEN
                    icon = "‚úÖ"
                elif value >= warning_threshold:
                    color = Colors.BRIGHT_YELLOW
                    icon = "‚ö†Ô∏è"
                else:
                    color = Colors.BRIGHT_RED
                    icon = "‚ùå"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if isinstance(value, float):
                value_str = f"{value:.1f}%"
            else:
                value_str = str(value)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ë–ï–ó —Ü–≤–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã (—Ä–æ–≤–Ω–æ box_width —Å–∏–º–≤–æ–ª–æ–≤)
            # –§–æ—Ä–º–∞—Ç: " ‚úÖ –¢–µ–∫—Å—Ç...                           –ó–Ω–∞—á–µ–Ω–∏–µ "
            icon_part = f" {icon} "  # 3 —Å–∏–º–≤–æ–ª–∞ (–ø—Ä–æ–±–µ–ª + –∏–∫–æ–Ω–∫–∞ + –ø—Ä–æ–±–µ–ª)
            key_part = f"{key}"  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞
            value_part = f"{value_str}"  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞

            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º
            # –í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ box_width (60) —Å–∏–º–≤–æ–ª–æ–≤
            used_space = len(icon_part) + len(key_part) + len(value_part)
            padding = " " * max(1, box_width - used_space)  # –ú–∏–Ω–∏–º—É–º 1 –ø—Ä–æ–±–µ–ª

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É: –∏–∫–æ–Ω–∫–∞ + —Ç–µ–∫—Å—Ç + padding + —Ü–≤–µ—Ç–Ω–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ
            # –¶–≤–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –ù–ï —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ –¥–ª–∏–Ω—É, –ø–æ—ç—Ç–æ–º—É –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
            print(
                f"{Colors.BRIGHT_CYAN}‚ïë{Colors.RESET}{icon_part}{key_part}{padding}{color}{value_part}{Colors.RESET}{Colors.BRIGHT_CYAN}‚ïë{Colors.RESET}"
            )

        print(f"{Colors.BRIGHT_CYAN}‚ïö{'‚ïê' * box_width}‚ïù{Colors.RESET}\n")

    @staticmethod
    def print_section_separator():
        """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏."""
        print(f"{Colors.DIM}{'‚îÄ' * 60}{Colors.RESET}")

    @staticmethod
    def print_completion_banner(output_path: str):
        """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        print(f"\n{Colors.BRIGHT_GREEN}{Colors.BOLD}")
        print("‚ïî" + "‚ïê" * 58 + "‚ïó")
        print("‚ïë" + " " * 58 + "‚ïë")
        print("‚ïë" + "  üéâ –û–¢–ß–Å–¢ –£–°–ü–ï–®–ù–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù!".center(58) + "‚ïë")
        print("‚ïë" + " " * 58 + "‚ïë")
        print("‚ïö" + "‚ïê" * 58 + "‚ïù")
        print(Colors.RESET)
        print(
            f"{Colors.CYAN}üìÑ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {Colors.WHITE}{output_path}{Colors.RESET}\n"
        )


def format_number(num: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á."""
    return f"{num:,}".replace(",", " ")


def format_duration(seconds: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.

    Args:
        seconds: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if seconds < 1:
        return f"{seconds * 1000:.0f}–º—Å"
    elif seconds < 60:
        return f"{seconds:.1f}—Å"
    else:
        minutes = int(seconds // 60)
        secs = seconds % 60
        return f"{minutes}–º {secs:.0f}—Å"
